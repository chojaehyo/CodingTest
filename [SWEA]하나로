#include <cstdio>
#include <cstring>
#include <queue>
using namespace std;
const int MAX = 1005;

int T, N, parent[MAX];
double E;
long long dist[MAX][MAX];

long long Find(long long x) {
    if (parent[x] == x) return x;
    else return parent[x] = Find(parent[x]);
}

bool Union(long long x, long long y) {
    long long px = Find(x);
    long long py = Find(y);
    if (px == py) return true;

    parent[px] = py;
    return 0;
}

int main() {
    scanf("%d", &T);
    for (int t = 1; t <= T; t++) {
        priority_queue<pair<long long, pair<long long, long long> > > pq;
        memset(dist, 0, sizeof(dist));
        memset(parent, 0, sizeof(dist));
        
        long long X[1000];
        long long Y[1000];
        scanf("%d", &N);
        for (int i = 0; i < N; i++)  scanf("%ld", &X[i]);
        for (int i = 0; i < N; i++)  scanf("%ld", &Y[i]);
        scanf("%lf", &E);
        
        for (long long i = 0; i < N; i++) parent[i] = i;
        
        for (long long i = 0; i < N; i++) {
            for (long long j = i + 1; j < N; j++) {
                dist[i][j] = ((X[i] - X[j]) * (X[i] - X[j]) + (Y[i] - Y[j]) * (Y[i] - Y[j]));
                dist[j][i] = dist[i][j];
                pq.push({ -dist[i][j],{i,j} });
            }
        }
        int cnt = 0;
        double result = 0;
        
        while (!pq.empty()) {
            if (cnt == N - 1) break;
            long long d = -pq.top().first;
            long long first = pq.top().second.first;
            long long second = pq.top().second.second;
            pq.pop();
            
            bool f = Union(first, second);
            if (f == 1) continue;
            
            cnt++;
            result += d;
        }
        printf("#%d %0.lf\n", t, E * result);
    }

    return 0;
}
