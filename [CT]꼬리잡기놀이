#include <cstdio>
#include <deque>
#include <queue>
#include <vector>
using namespace std;
const int MAX = 25;

int N, M, K, arr[MAX][MAX], train_pos[MAX][MAX], train_num, result;
int dx[] = { 0, -1, 0, 1 };
int dy[] = { 1, 0, -1, 0 };
struct T_INFO {
	int x, y, val;
};
deque <T_INFO> train[10];
struct INFO {
	int x, y, d;
};
vector <INFO> fly_pos;

void find_train_num() {
	train_num = 1;
	bool visited[MAX][MAX] = { 0 };

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (!visited[i][j] && arr[i][j] == 1) {
				train[train_num].push_back({ i, j, arr[i][j] });
				queue <T_INFO> q;
				q.push({ i, j, arr[i][j] });
				visited[i][j] = true;
				arr[i][j] = 4;
				train_pos[i][j] = train_num;

				bool flag = false; int prev = 1;
				while (!q.empty()) {
					if (flag) break;
					int x = q.front().x;
					int y = q.front().y;
					int val = q.front().val;
					q.pop();

					for (int d = 0; d < 4; d++) {
						int nx = x + dx[d];
						int ny = y + dy[d];

						if (nx < 0 || nx >= N || ny < 0 || ny >= N) continue;
						if (!visited[nx][ny]) {
							if (arr[nx][ny] == 2) {
								q.push({ nx, ny, 2 });
								train[train_num].push_back({ nx, ny, 2 });
								arr[nx][ny] = 4;
								train_pos[nx][ny] = train_num;
								visited[nx][ny] = true;
							}
							else if (arr[nx][ny] == 3 && val == 2) {
								flag = true;
								q.push({ nx, ny });
								train[train_num].push_back({ nx, ny });
								arr[nx][ny] = 4;
								train_pos[nx][ny] = train_num;
								train_num++;
								visited[nx][ny] = true;
								break;
							}
						}
					}
				}
			}
		}
	}
}

void make_fly_pos() {
	for (int x = 0, y = 0; x < N; x++) fly_pos.push_back({ x, y, 0 });
	for (int x = N - 1, y = 0; y < N; y++) fly_pos.push_back({ x, y, 1 });
	for (int x = N - 1, y = N - 1; x >= 0; x--) fly_pos.push_back({ x, y, 2 });
	for (int x = 0, y = N - 1; y >= 0; y--) fly_pos.push_back({ x, y, 3 });
}

void move_train() {
	for (int i = 1; i < train_num; i++) {
		bool flag = false;
		int x = train[i][0].x;
		int y = train[i][0].y;
		for (int d = 0; d < 4; d++) {
			int nx = x + dx[d];
			int ny = y + dy[d];
			if (nx < 0 || nx >= N || ny < 0 || ny >= N) continue;
			if (arr[nx][ny] == 4) {
				if (train_pos[nx][ny] == 0) {
					train[i].push_front({ nx, ny });
					train_pos[nx][ny] = i;

					int bx = train[i].back().x;
					int by = train[i].back().y;
					train_pos[bx][by] = 0;
					train[i].pop_back();
					flag = true;
					break;
				}
			}
		}
		if (!flag) {
			T_INFO tmp = train[i].back();
			train[i].pop_back();
			train[i].push_front(tmp);
		}
	}
}

void reverse(int num) {
	deque <T_INFO> tmp;
	for (int i = train[num].size() - 1; i >= 0; i--) tmp.push_back(train[num][i]);
	train[num] = tmp;
}

void fly_gift(int time) {
	int x = fly_pos[time].x;
	int y = fly_pos[time].y;
	int d = fly_pos[time].d;

	for (int i = 0; i < N; i++) {
		if (train_pos[x][y] > 0) {
			int tn = train_pos[x][y];

			for (int j = 0; j < train[tn].size(); j++) {
				int tx = train[tn][j].x;
				int ty = train[tn][j].y;

				if (tx == x && ty == y) {
					result += (j + 1) * (j + 1);
					reverse(tn);
					return;
				}
			}
		}
		else {
			x += dx[d];
			y += dy[d];
		}
	}
}

int main() {
	scanf("%d %d %d", &N, &M, &K);
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			scanf("%d", &arr[i][j]);
		}
	}
	find_train_num();
	make_fly_pos();

	for (int i = 0; i < K; i++) {
		move_train();
		int j = i % (4 * N);
		fly_gift(j);
	}
	printf("%d\n", result);
	return 0;
}
