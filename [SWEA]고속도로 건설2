#include <cstdio>
#include <queue>
using namespace std;
const int MAX = 50005;

int T, N, M, s, e, c, parent[MAX];

struct INFO{
    int start, end, cost;
};
struct compare{
    bool operator()(INFO a, INFO b){
        if(a.cost > b.cost) return true;
        else return false;
    }
};

priority_queue<INFO, vector<INFO>, compare> pq;

int find_parent(int x){
    if(x == parent[x]) return parent[x];
    else return find_parent(parent[x]);
}

void _union(int x, int y){
    if(x > y) parent[x] = parent[y];
    else parent[y] = parent[x];
}

int main(){
    scanf("%d", &T);

    for(int t=1;t<=T;t++){
        scanf("%d %d", &N, &M);

        for(int i=1;i<=M;i++){
            scanf("%d %d %d", &s, &e, &c);
            pq.push({s, e, c});
        }

        int result = 0;
        for(int i=1;i<=N;i++) parent[i] = i;
        
        while(!pq.empty()){
            int start = pq.top().start;
            int end = pq.top().end;
            int cost = pq.top().cost;
            pq.pop();
            
            int x = find_parent(start);
            int y = find_parent(end);
            
            if(x == y) continue;
            else{
                result += cost;
                _union(x, y);
            }
        }
        printf("#%d %d\n", t, result);
    }
    return 0;
}
