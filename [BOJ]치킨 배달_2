#include <cstdio>
#include <cstring>
#include <queue>
#include <algorithm>
using namespace std;
const int MAX = 55;

int N, M, arr[MAX][MAX], cnt, ans[MAX], dist[MAX][MAX], result=987987987;
int dx[] = { -1, 0, 1, 0 };
int dy[] = { 0, 1, 0, -1 };
struct info {
	int x, y;
};
info chicken[15];
bool visited[MAX][MAX];

void bfs() {
	memset(visited, 0, sizeof(visited));
	memset(dist, 0, sizeof(dist));
	queue <pair<int, int> > q;

	for (int i = 0; i < M; i++) {
		int num = ans[i];
		q.push(make_pair(chicken[num].x, chicken[num].y));
		visited[chicken[num].x][chicken[num].y] = true;
	}

	while (!q.empty()) {
		int x = q.front().first;
		int y = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];

			if (nx < 1 || nx > N || ny < 1 || ny > N) continue;
			if (!visited[nx][ny]) {
				visited[nx][ny] = true;
				dist[nx][ny] = dist[x][y] + 1;
				q.push(make_pair(nx, ny));
			}
		}
	}
}

void get_total() {
	int total = 0;
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			if (arr[i][j] == 1) total += dist[i][j];
		}
	}
	result = min(result, total);
}

void comb(int idx, int x) {
	if (idx >= M) {
		bfs();
		get_total();
	}
	else {
		for (int i = x; i < cnt; i++) {
			ans[idx] = i;
			comb(idx + 1, i + 1);
		}
	}
}
int main() {
	scanf("%d %d", &N, &M);

	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			scanf("%d", &arr[i][j]);
			if (arr[i][j] == 2) {
				chicken[cnt++] = { i, j };
			}
		}
	}

	comb(0, 0);
	printf("%d\n", result);
	return 0;
}
