#include <stdio.h>
#include <vector>
#include <queue>
using namespace std;
const int MAX = 1 << 6;

int N, Q, total, biggest;
int arr[MAX][MAX];
vector <int> ord;
bool visited[MAX][MAX];
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};

void rotate(int x, int y, int len){
  int cnt = len/2;
  for(int square=0;square<cnt;square++){
    int sx = x+square;
    int sy = y+square;
    int ex = x+len-1-square;
    int ey = y+len-1-square;
    
    int x_idx = ex;
    int y_idx = sy;
    int idx = 0;
    
    vector <int> tmp;
    for(int i=sx;i<ex;i++) tmp.push_back(arr[i][sy]);
    for(int i=sx;i<ex;i++) arr[i][sy] = arr[ex][y_idx++];
    for(int j=sy;j<ey;j++) arr[ex][j] = arr[x_idx--][ey];
    for(int i=ex;i>sx;i--) arr[i][ey] = arr[sx][y_idx--];
    for(int j=ey;j>sy;j--) arr[sx][j] = tmp[idx++];
  }
}

void melt(){
  vector <pair <int, int>> v;
  
  for(int i=0;i<N;i++){
    for(int j=0;j<N;j++){
      if(arr[i][j] == 0) continue;
      
      int near = 0;
      for(int k=0;k<4;k++){
        int nx = i+dx[k];
        int ny = j+dy[k];
        if(nx < 0 || nx >= N || ny < 0 || ny >=N || arr[nx][ny] == 0) continue;
        near++;
      }
      if(near < 3) v.push_back({i, j});
    }
  }
  for(int i=0;i<v.size();i++){
    int x = v[i].first;
    int y = v[i].second;
    arr[x][y]--;
    total--;
  }
}

void bfs(int a, int b){
  queue <pair<int,int>> q;
  q.push({a, b});
  visited[a][b] = true;
  
  int connect = 1;
  while(!q.empty()){
    int x = q.front().first;
    int y = q.front().second;
    q.pop();
    
    for(int i=0;i<4;i++){
      int nx = x+dx[i];
      int ny = y+dy[i];
      
      if(nx < 0 || nx >= N || ny < 0 || ny >= N || arr[nx][ny] == 0) continue;
      if(!visited[nx][ny]){
        connect++;
        visited[nx][ny] = true;
        q.push({nx, ny});
      }
    }
  }
  if(biggest < connect) biggest = connect;
}
int main(){
  scanf("%d %d", &N, &Q);
  N = (1 << N);
  for(int i=0;i<N;i++){
    for(int j=0;j<N;j++){
      scanf("%d", &arr[i][j]);
      total += arr[i][j];
    }
  }
  for(int i=0;i<Q;i++){
    int a;
    scanf("%d", &a);
    ord.push_back(a);
  }
  
  for(int k=0;k<Q;k++){
    int L = (1 << ord[k]);
    
    for(int i=0;i<N;i+=L){
      for(int j=0;j<N;j+=L) rotate(i, j, L);
    }
    melt();
  }
  
  for(int i=0;i<N;i++){
    for(int j=0;j<N;j++){
      if(arr[i][j] == 0) continue;
      if(!visited[i][j]){
        bfs(i, j);
      }
    }
  }
  printf("%d\n%d\n", total, biggest);
  return 0;
}
