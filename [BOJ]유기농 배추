#include <stdio.h>
#include <cstring>
#include <queue>
using namespace std;
const int MAX = 55;

int T, M, N, K;
int arr[MAX][MAX];
bool visited[MAX][MAX];
struct loc{
  int x, y;
};
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};

void bfs(int a, int b){
  visited[a][b] = true;
  queue <loc> q;
  q.push({a, b});
  
  while(!q.empty()){
    int x = q.front().x;
    int y = q.front().y;
    q.pop();
    
    for(int i=0;i<4;i++){
      int nx = x+dx[i];
      int ny = y+dy[i];
      
      if(nx < 0 || nx >= M || ny < 0 || ny >= N) continue;
      if(!visited[nx][ny] && arr[nx][ny]){
        visited[nx][ny] = true;
        q.push({nx, ny});
      }
    }
  }
}
int main(){
  scanf("%d", &T);
  for(int t=1;t<=T;t++){
    memset(arr, 0, sizeof(arr));
    memset(visited, 0, sizeof(visited));
    scanf("%d %d %d", &M, &N, &K);
    for(int i=0;i<K;i++){
      int x_val, y_val;
      scanf("%d %d", &x_val, &y_val);
      arr[x_val][y_val] = 1;
    }
    int result=0;
    for(int i=0;i<M;i++){
      for(int j=0;j<N;j++){
        if(!visited[i][j] && arr[i][j]){
          bfs(i, j);
          result++;
        }
      }
    }
    printf("%d\n", result);
  }
  return 0;
}
