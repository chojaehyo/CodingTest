#include <cstdio>
#include <cstring>
#include <queue>
using namespace std;
const int MAX = 1 << 6;

int N, Q, L, n, arr[MAX][MAX], tmp[MAX][MAX];
int dx[] = { -1, 0, 1, 0 };
int dy[] = { 0, 1, 0, -1 };
bool visited[MAX][MAX];

void minus_ice() {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (arr[i][j] > 0) {
				int cnt = 0;
				for (int d = 0; d < 4; d++) {
					int nx = i + dx[d];
					int ny = j + dy[d];

					if (nx < 0 || nx >= n || ny < 0 || ny >= n) continue;
					if (arr[nx][ny] > 0) cnt++;
				}
				if (cnt < 3) tmp[i][j] = arr[i][j]-1;
                else tmp[i][j] = arr[i][j];
			}
		}
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			arr[i][j] = tmp[i][j];
		}
	}
}

void rotate(int x, int y, int l) {
	for (int i = x, ny = y+l-1; i < x + l; i++, ny--) {
		for (int j = y, nx=x; j < y + l; j++, nx++) {
			tmp[nx][ny] = arr[i][j];
		}
	}
	for (int i = x; i < x + l; i++) {
		for (int j = y; j < y + l; j++) {
			arr[i][j] = tmp[i][j];
		}
	}
}

void get_sub_arr(int val) {
	int val2 = 1 << val;

	for (int i = 0; i < n; i += val2) {
		for (int j = 0; j < n; j += val2) {
			rotate(i, j, val2);
		}
	}
}

int get_cnt() {
	int result = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			result += arr[i][j];
		}
	}
	return result;
}

int get_max_cnt() {
	int max_cnt = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			int cnt = 0;
			if (!visited[i][j] && arr[i][j] > 0) {
				queue <pair<int, int>> q;
				q.push({ i, j });
				visited[i][j] = true;
				cnt++;

				while (!q.empty()) {
					int x = q.front().first;
					int y = q.front().second;
					q.pop();

					for (int d = 0; d < 4; d++) {
						int nx = x + dx[d];
						int ny = y + dy[d];

						if (nx < 0 || nx >= n || ny < 0 || ny >= n) continue;
						if (!visited[nx][ny] && arr[nx][ny] > 0) {
							cnt++;
							visited[nx][ny] = true;
							q.push({ nx, ny });
						}
					}
				}
				if (max_cnt < cnt) max_cnt = cnt;
			}
		}
	}
	return max_cnt;
}

int main() {
	scanf("%d %d", &N, &Q);
	n = 1 << N;

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			scanf("%d", &arr[i][j]);
		}
	}

	for (int i = 0; i < Q; i++) {
		scanf("%d", &L);
		get_sub_arr(L);
		minus_ice();
	}
	int cnt = get_cnt();
	int max_cnt = get_max_cnt();
	printf("%d\n%d\n", cnt, max_cnt);
	return 0;
}
