#include <cstdio>
#include <cstring>
#include <queue>
using namespace std;

char arr[15][10];
bool visited[15][10];
int dx[] = { -1, 0, 1, 0 };
int dy[] = { 0, 1, 0, -1 };

bool bfs(int a, int b) {
	visited[a][b] = true;
	queue <pair<int, int>> q;
	queue <pair<int, int>> q2;
	q.push(make_pair(a, b));
	q2.push(make_pair(a, b));

	while (!q.empty()) {
		int x = q.front().first;
		int y = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];

			if (nx < 0 || nx >= 12 || ny < 0 || ny >= 6) continue;

			if (!visited[nx][ny]) {
				if (arr[nx][ny] == arr[x][y]) {
					visited[nx][ny] = true;
					q.push(make_pair(nx, ny));
					q2.push(make_pair(nx, ny));
				}
			}
		}

	}

	if (q2.size() >= 4) {
		while (!q2.empty()) {
			int x = q2.front().first;
			int y = q2.front().second;
			q2.pop();

			arr[x][y] = '.';
		}

		return true;
	}
	return false;
}
bool check() {
	bool result = false;
	memset(visited, 0, sizeof(visited));

	for (int i = 0; i < 12; i++) {
		for (int j = 0; j < 6; j++) {
			if (arr[i][j] == '.') continue;

			if (!visited[i][j]) {
				bool res = bfs(i, j);
				if (res) result = true;
			}
		}
	}
	return result;
}

void gravity() {
	for (int i = 11; i >= 1; i--) {
		for (int j = 0; j < 6; j++) {
			if (arr[i][j] == '.') {

				for (int k = i - 1; k >= 0; k--) {
					if (arr[k][j] == '.') continue;
					arr[i][j] = arr[k][j];
					arr[k][j] = '.';
					break;
				}
			}
		}
	}
}

int main() {
	for (int i = 0; i < 12; i++) {
		for (int j = 0; j < 6; j++) {
			scanf(" %1c", &arr[i][j]);
		}
	}

	int time = 0;
	while (1) {
		if (!check()) break;
		gravity();
		time++;
	}
	printf("%d\n", time);
	return 0;
}
