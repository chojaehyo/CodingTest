#include <cstdio>
#include <cstring>
#include <vector>
#include <queue>
using namespace std;
const int MAX = 25;

int R, C, K, W, arr[MAX][MAX], tmp[MAX][MAX], x, y, t;
vector <int> wall[MAX][MAX];
bool visited[MAX][MAX];
struct INFO{
    int x, y, type;
};
struct Q_INFO{
    int x, y, temp;
};
int dx[] = {0, 1, 0, -1};
int dy[] = {1, 0, -1, 0};
vector <INFO> heater;
vector <pair<int, int>> target;

bool check_range(int x, int y){
    if(x < 0 || x >= R || y < 0 || y >= C) return false;
    else return true;
}

void start_heater(int type, int x, int y){
    memset(visited, 0, sizeof(visited));
    queue <Q_INFO> q;

    if(type == 1){
        arr[x][y+1] += 5;
        visited[x][y+1] = true;
        q.push({x, y+1, 5});

        while(!q.empty()){
            int cx = q.front().x;
            int cy = q.front().y;
            int ct = q.front().temp;
            q.pop();

            if(ct == 0) break;
            if(!check_range(cx, cy)) continue;

            if(check_range(cx-1, cy+1) && !visited[cx-1][cy+1]) {
                if(check_range(cx-1, y) && (wall[cx-1][cy].size() == 0 || (wall[cx-1][cy].size() == 1 && wall[cx-1][cy].front() != 2))){
                    if(wall[cx][cy].size() == 0 || (wall[cx][cy].size() == 1 && wall[cx][cy].front() != 1)){
                        arr[cx - 1][cy + 1] += ct - 1;
                        visited[cx - 1][cy + 1] = true;
                        q.push({cx - 1, cy + 1, ct - 1});
                    }
                }
            }

            if (check_range(cx, cy + 1) && !visited[cx][cy+1]) {
                if (wall[cx][cy].size() == 0 || (wall[cx][cy].size() == 1 && wall[cx][cy].front() != 2)) {
                    arr[cx][cy + 1] += ct - 1;
                    visited[cx][cy + 1] = true;
                    q.push({cx, cy + 1, ct - 1});
                }
            }

            if(check_range(cx+1, cy+1) && !visited[cx+1][cy+1]){
                if(check_range(cx+1, cy) && wall[cx+1][cy].size() == 0){
                    arr[cx+1][cy+1] += ct-1;
                    visited[cx+1][cy+1] = true;
                    q.push({cx+1, cy+1, ct-1});
                }
            }
        }
    }
    else if(type == 2){
        arr[x][y-1] += 5;
        visited[x][y-1] = true;
        q.push({x, y-1, 5});

        while(!q.empty()){
            int cx = q.front().x;
            int cy = q.front().y;
            int ct = q.front().temp;
            q.pop();

            if(ct == 0) break;
            if(!check_range(cx, cy)) continue;

            if(check_range(cx-1, cy-1) && !visited[cx-1][cy-1]) {
                if(wall[cx-1][cy-1].size() == 0 || (wall[cx-1][cy-1].size() == 1 && wall[cx-1][cy-1].front() != 2)){
                    if(wall[cx][cy].size() == 0 || (wall[cx][cy].size() == 1 && wall[cx][cy].front() != 1)){
                        arr[cx - 1][cy - 1] += ct - 1;
                        visited[cx - 1][cy - 1] = true;
                        q.push({cx - 1, cy - 1, ct - 1});
                    }
                }
            }
            if(check_range(cx, cy-1) && !visited[cx][cy-1]){
                if(wall[cx][cy-1].size() == 0 || (wall[cx][cy-1].size() == 1 && wall[cx][cy-1].front() != 2)){
                    arr[cx][cy-1] += ct-1;
                    visited[cx][cy-1] = true;
                    q.push({cx, cy-1, ct-1});
                }
            }
            if(check_range(cx+1, cy-1) && !visited[cx+1][cy-1]) {
                if (check_range(cx + 1, cy) && (wall[cx + 1][cy].size() == 0 || (wall[cx + 1][cy].size() == 1 && wall[cx + 1][cy].front() != 1))) {
                    if (wall[cx + 1][cy - 1].size() == 0 || (wall[cx + 1][cy - 1].size() == 1 && wall[cx + 1][cy - 1].front() != 2)) {
                        arr[cx + 1][cy - 1] += ct - 1;
                        visited[cx + 1][cy - 1] = true;
                        q.push({cx + 1, cy - 1, ct - 1});
                    }
                }
            }
        }
    }
    else if(type == 3){
        arr[x-1][y] += 5;
        visited[x-1][y] = true;
        q.push({x-1, y, 5});

        while(!q.empty()){
            int cx = q.front().x;
            int cy = q.front().y;
            int ct = q.front().temp;
            q.pop();

            if(ct == 0) break;
            if(!check_range(cx, cy)) continue;

            if(check_range(cx-1, cy-1) && !visited[cx-1][cy-1]) {
                if (check_range(cx, cy - 1) && wall[cx][cy - 1].size() == 0) {
                    arr[cx - 1][cy - 1] += ct - 1;
                    visited[cx - 1][cy - 1] = true;
                    q.push({cx - 1, cy - 1, ct - 1});
                }
            }
            if(check_range(cx-1, cy) && !visited[cx-1][cy]) {
                if (wall[cx][cy].size() == 0 || (wall[cx][cy].size() == 1 && wall[cx][cy].front() != 1)) {
                    arr[cx - 1][cy] += ct - 1;
                    visited[cx - 1][cy] = true;
                    q.push({cx - 1, cy, ct - 1});
                }
            }
            if(check_range(cx-1, cy+1) && !visited[cx-1][cy+1]){
                if (check_range(cx, cy + 1) && (wall[cx][cy + 1].size() == 0 || (wall[cx][cy + 1].size() == 1 && wall[cx][cy + 1].front() != 1))) {
                    if (wall[cx][cy].size() == 0 || (wall[cx][cy].size() == 1 && wall[cx][cy].front() != 2)) {
                        arr[cx - 1][cy + 1] += ct - 1;
                        visited[cx - 1][cy + 1] = true;
                        q.push({cx - 1, cy + 1, ct - 1});
                    }
                }
            }
        }
    }
    else {
        arr[x+1][y] += 5;
        visited[x+1][y] = true;
        q.push({x+1, y, 5});

        while(!q.empty()){
            int cx = q.front().x;
            int cy = q.front().y;
            int ct = q.front().temp;
            q.pop();

            if(ct == 0) break;
            if(!check_range(cx, cy)) continue;

            if(check_range(cx+1, cy-1) && !visited[cx+1][cy-1]) {
                if (check_range(cx, cy-1) && (wall[cx][cy - 1].size() == 0 || (wall[cx][cy-1].size() == 1 && wall[cx][cy-1].front() != 2))) {
                    if(wall[cx+1][cy-1].size() == 0 || (wall[cx+1][cy-1].size() == 1 && wall[cx+1][cy-1].front() != 1)) {
                        arr[cx + 1][cy - 1] += ct - 1;
                        visited[cx + 1][cy - 1] = true;
                        q.push({cx + 1, cy - 1, ct - 1});
                    }
                }
            }
            if(check_range(cx+1, cy) && !visited[cx+1][cy]){
                if((wall[cx+1][cy].size() == 0 || (wall[cx+1][cy].size() == 1 && wall[cx+1][cy].front() != 1))){
                    arr[cx+1][cy] += ct-1;
                    visited[cx+1][cy] = true;
                    q.push({cx+1, cy, ct-1});
                }
            }
            if(check_range(cx+1, cy+1) && !visited[cx+1][cy+1]) {
                if(wall[cx][cy].size() == 0 || (wall[cx][cy].size() == 1 && wall[cx][cy].front() != 2)) {
                    if(wall[cx+1][cy+1].size() == 0 || (wall[cx+1][cy+1].size() == 1 && wall[cx+1][cy+1].front() != 1)){
                        arr[cx + 1][cy + 1] += ct - 1;
                        visited[cx + 1][cy + 1] = true;
                        q.push({cx + 1, cy + 1, ct - 1});
                    }
                }
            }
        }
    }
}

void control_temp(){
    memset(tmp, 0, sizeof(tmp));
    for(int i=0;i<R;i++) {
        for (int j = 0; j < C; j++) {
            for (int d = 0; d < 2; d++) {
                int nx = i + dx[d];
                int ny = j + dy[d];

                if (check_range(nx, ny)) {
                    if (d == 0) {
                        if (wall[i][j].size() == 2) continue;
                        else if (wall[i][j].size() == 1 && wall[i][j].front() == 2) continue;
                    }
                    else if (d == 1) {
                        if (wall[nx][ny].size() == 2) continue;
                        else if (wall[nx][ny].size() == 1 && wall[nx][ny].front() == 1) continue;
                    }
                    if (arr[i][j] > arr[nx][ny]) {
                        int val = (arr[i][j] - arr[nx][ny]) / 4;
                        tmp[i][j] -= val;
                        tmp[nx][ny] += val;
                    }
                    else if(arr[i][j] < arr[nx][ny]){
                        int val = (arr[nx][ny] - arr[i][j]) / 4;
                        tmp[i][j] += val;
                        tmp[nx][ny] -= val;
                    }
                }
            }
        }
    }
    for(int i=0;i<R;i++) {
        for (int j = 0; j < C; j++) {
            arr[i][j] += tmp[i][j];
        }
    }
}

bool check(){
    bool flag = true;

    for(int i=0;i<target.size();i++){
        int x = target[i].first;
        int y = target[i].second;
        if(arr[x][y] < K) {
            flag = false;
            break;
        }
    }
    return flag;
}

void reduce_temp(){
    for(int i=0;i<R;i++){
        if(arr[i][0] > 0) arr[i][0]--;
        if(arr[i][C-1] > 0) arr[i][C-1]--;
    }
    for(int j=1;j<C-1;j++){
        if(arr[0][j] > 0) arr[0][j]--;
        if(arr[R-1][j] > 0) arr[R-1][j]--;
    }
}

int main(){
    scanf("%d %d %d", &R, &C, &K);

    for(int i=0;i<R;i++){
        for(int j=0;j<C;j++){
            scanf("%d", &arr[i][j]);
            if(arr[i][j] > 0 && arr[i][j] < 5) {
                heater.push_back({i, j, arr[i][j]});
                arr[i][j] = 0;
            }
            else if (arr[i][j] == 5) {
                target.push_back({i, j});
                arr[i][j] = 0;
            }
        }
    }

    scanf("%d", &W);

    for(int i=0;i<W;i++){
        scanf("%d %d %d", &x, &y, &t);
        x--; y--;

        if(t == 0) wall[x][y].push_back(1);
        else wall[x][y].push_back(2);
    }

    int chocolate = 0;

    while(1){
        if(chocolate > 100) break;
        for(int i=0;i<heater.size();i++) start_heater(heater[i].type, heater[i].x, heater[i].y);
        control_temp();
        reduce_temp();
        chocolate++;
        if(check()) break;
    }
    printf("%d\n", chocolate);
    return 0;
}
