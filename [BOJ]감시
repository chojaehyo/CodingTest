#include <stdio.h>
#include <vector>
using namespace std;
const int MAX = 15;

int N, M, result=987987987;
int arr[MAX][MAX], tmp[MAX][MAX], ans[10];
struct info{
  int x, y, num;
};
vector <info> cctv;
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};

void fill_space(int x, int y, int d){
  while(1){
    int nx = x+dx[d];
    int ny = y+dy[d];
    if(tmp[nx][ny] == 6) break;
    if(nx < 0 || nx >= N || ny < 0 || ny >= M) break;
    tmp[nx][ny] = 1;
    x = nx;
    y = ny;
  }
}
void fill_tmp(){
  for(int i=0;i<N;i++){
    for(int j=0;j<M;j++){
      tmp[i][j] = arr[i][j];
    }
  }
  
  for(int c=0;c<cctv.size();c++){
    int d = ans[c];
    int x = cctv[c].x;
    int y = cctv[c].y;
    int type = cctv[c].num;
    
    if(type == 1) fill_space(x, y, d);
    else if(type == 2){
      fill_space(x, y, d);
      fill_space(x, y, (d+2)%4);
    }
    else if(type == 3){
      fill_space(x, y, d);
      fill_space(x, y, (d+1)%4);
    }
    else if(type == 4){
      fill_space(x, y, d);
      fill_space(x, y, (d+1)%4);
      fill_space(x, y, (d+3)%4);
    }
    else{
      fill_space(x, y, d);
      fill_space(x, y, (d+1)%4);
      fill_space(x, y, (d+2)%4);
      fill_space(x, y, (d+3)%4);
    }
  }
}

int count_space(){
  int cnt = 0;
  for(int i=0;i<N;i++){
    for(int j=0;j<M;j++){
      if(tmp[i][j] == 0) cnt++;
    }
  }
  return cnt;
}
void comb(int idx){
  if(idx >= cctv.size()){
    fill_tmp();
    int res = count_space();
    if(res < result) result = res;
    return;
  }
  for(int i=0;i<4;i++){
    ans[idx] = i;
    comb(idx+1);
  }
}

int main(){
  scanf("%d %d", &N, &M);
  for(int i=0;i<N;i++){
    for(int j=0;j<M;j++){
      scanf("%d", &arr[i][j]);
      if(arr[i][j] >= 1 && arr[i][j] <= 5){
        cctv.push_back({i, j, arr[i][j]});
      }
    }
  }
  
  comb(0);
  printf("%d\n", result);
  return 0;
}
