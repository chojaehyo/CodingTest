#include <cstdio>
#include <cstring>
#include <queue>
using namespace std;
const int MAX = 10005;
const int INF = 987987987;

struct NODE{
    int parent;
    int c_idx;
    int child[2];
};

int T, V, E, input[2], dist[MAX][2], result;
NODE Tree[MAX];

void init(){
    memset(Tree, 0, sizeof(Tree));
    memset(dist, 0, sizeof(dist));
}

void dfs(int node, int cur_dist, int idx){
    dist[node][idx] = cur_dist;

    if(Tree[node].parent != 0){
        dfs(Tree[node].parent, cur_dist+1, idx);
    }
}

int bfs(int node){
    queue <int> q;
    q.push(node);
    int cnt = 1;

    while(!q.empty()){
        int cur = q.front();
        q.pop();

        for(int i=0;i<2;i++){
            if(Tree[cur].child[i] != 0){
                q.push(Tree[cur].child[i]);
                cnt++;
            }
        }
    }
    return cnt;
}

int main(){
    scanf("%d", &T);

    for(int t=1;t<=T;t++){
        init();
        
        scanf("%d %d %d %d", &V, &E, &input[0], &input[1]);

        for(int i=0;i<E;i++){
            int p, c;
            scanf("%d %d", &p, &c);

            Tree[p].child[Tree[p].c_idx++] = c;
            Tree[c].parent = p;
        }

        for(int i=0;i<2;i++) dfs(input[i], 0, i);

        int tmp[2] = {INF, INF};
        for(int i=1;i<=V;i++){
            if(dist[i][0] != 0 && dist[i][1] != 0){
                if(dist[i][0] < tmp[0] && dist[i][1] < tmp[1]){
                    tmp[0] = dist[i][0];
                    tmp[1] = dist[i][1];
                    result = i;
                }
            }
        }
        int result_cnt = bfs(result);

        printf("#%d %d %d\n", t, result, result_cnt);
    }
    return 0;
}
