#include <cstdio>
#include <queue>
#include <algorithm>
using namespace std;
const int MAX = 25;

int N, result;
int arr[MAX][MAX];
void find_max() {
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (arr[i][j] > 0) result = max(result, arr[i][j]);
		}
	}
}

void move(int dir) {
	queue <int> q;
	if (dir == 0) {
		for (int j = 0; j < N; j++) {
			for (int i = 0; i < N; i++) {
				if (arr[i][j] > 0) {
					q.push(arr[i][j]);
					arr[i][j] = 0;
				}
			}
			int idx = 0;
			while (!q.empty()) {
				int val = q.front();
				q.pop();
				if (arr[idx][j] == 0) arr[idx][j] = val;
				else if (arr[idx][j] == val) {
					arr[idx][j] *= 2;
					idx++;
				}
				else {
					idx++;
					arr[idx][j] = val;
				}
			}
		}
	}
	else if (dir == 1) {
		for (int i = 0; i < N; i++) {
			for (int j = N - 1; j >= 0; j--) {
				if (arr[i][j] > 0) {
					q.push(arr[i][j]);
					arr[i][j] = 0;
				}
			}
			int idx = N-1;
			while (!q.empty()) {
				int val = q.front();
				q.pop();

				if (arr[i][idx] == 0) arr[i][idx] = val;
				else if (arr[i][idx] == val) {
					arr[i][idx] *= 2;
					idx--;
				}
				else {
					idx--;
					arr[i][idx] = val;
				}
			}
		}
	}
	else if (dir == 2) {
		for (int j = 0; j < N; j++) {
			for (int i = N - 1; i >= 0; i--) {
				if (arr[i][j] > 0) {
					q.push(arr[i][j]);
					arr[i][j] = 0;
				}
			}

			int idx = N - 1;
			while (!q.empty()) {
				int val = q.front();
				q.pop();

				if (arr[idx][j] == 0) arr[idx][j] = val;
				else if (arr[idx][j] == val) {
					arr[idx][j] *= 2;
					idx--;
				}
				else {
					idx--;
					arr[idx][j] = val;
				}
			}
		}
	}
	else {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (arr[i][j] > 0) {
					q.push(arr[i][j]);
					arr[i][j] = 0;
				}
			}

			int idx = 0;
			while (!q.empty()) {
				int val = q.front();
				q.pop();

				if (arr[i][idx] == 0) arr[i][idx] = val;
				else if (arr[i][idx] == val) {
					arr[i][idx] *= 2;
					idx++;
				}
				else {
					idx++;
					arr[i][idx] = val;
				}
			}
		}
	}
}
void copy_arr(int A[][MAX], int B[][MAX]) {
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			B[i][j] = A[i][j];
		}
	}
}
void comb(int cnt) {
	if (cnt == 5) {
		find_max();
	}
	else {
	  int temp[MAX][MAX];
		copy_arr(arr, temp);
		for (int i = 0; i < 4; i++) {
			move(i);
			comb(cnt + 1);
			copy_arr(temp, arr);
		}
	}
}
int main() {
	scanf("%d", &N);
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			scanf("%d", &arr[i][j]);
		}
	}
	comb(0);
	printf("%d\n", result);
	return 0;
}
