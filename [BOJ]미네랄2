#include <cstdio>
#include <vector>
#include <queue>
#include <cstring>
#include <algorithm>
using namespace std;
const int MAX = 105;

int R, C, N, arr[MAX][MAX], group[MAX][MAX], r;
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};
char input;
bool visited[MAX][MAX];
vector <pair<int, int>> group2;

int destroy_mineral(int idx, int row){
    if(idx % 2 == 0){
        for(int i=1;i<=C;i++){
            if(arr[row][i]){
                arr[row][i] = 0;
                return 1;
            }
        }
    }
    else{
        for(int i=C;i>=1;i--){
            if(arr[row][i]){
                arr[row][i] = 0;
                return 1;
            }
        }
    }
    return 0;
}

void find_group(int a, int b, int g_num){
    queue <pair<int, int>> q;
    q.push({a, b});
    visited[a][b] = true;
    group[a][b] = g_num;
    if(g_num == 2) group2.push_back({a, b});

    while(!q.empty()){
        int x = q.front().first;
        int y = q.front().second;
        q.pop();

        for(int i=0;i<4;i++) {
            int nx = x + dx[i];
            int ny = y + dy[i];

            if (nx < 1 || nx > R || ny < 1 || ny > C) continue;
            if (!visited[nx][ny] && arr[nx][ny] == 1) {
                visited[nx][ny] = true;
                group[nx][ny] = g_num;
                q.push({nx, ny});
                if(g_num == 2) group2.push_back({nx, ny});
            }
        }
    }
}

void gravity(){
    int min_dist = 1e9;
    sort(group2.begin(), group2.end(), greater<>());

    for(int i=0;i<group2.size();i++){
        int x = group2[i].first;
        int y = group2[i].second;
        int dist = 0;

        while(1) {
            int nx = x + dx[2];
            int ny = y + dy[2];
            dist++;

            if (nx == R || group[nx][ny] == 1) {
                min_dist = min(min_dist, dist);
                break;
            }
            x = nx; y = ny;
        }
    }
    printf("md: %d\n", min_dist);
    for(int i=0;i<group2.size();i++) {
        int x = group2[i].first;
        int y = group2[i].second;
        int nx = x + min_dist;
        arr[x][y] = 0;
        arr[nx][y] = 1;
    }
    group2.clear();
}

void check(){
    memset(group, 0, sizeof(group));
    memset(visited, 0, sizeof(visited));
    int g_num = 0;
    for(int i=R;i>=1;i--){
        for(int j=1;j<=C;j++){
            if(!visited[i][j] && arr[i][j] == 1){
                g_num++;
                find_group(i, j, g_num);
            }
        }
    }
    printf("%d\n", g_num);
    if(g_num == 2) gravity();
}

void print_group(){
    for(int i=1;i<=R;i++) {
        for (int j = 1; j <= C; j++) {
            if(arr[i][j] == 1) printf("x");
            else printf(".");
        }
        printf("\n");
    }
    printf("\n");
}
int main(){
    scanf("%d %d", &R, &C);

    for(int i=1;i<=R;i++){
        for(int j=1;j<=C;j++){
            scanf(" %c", &input);
            if(input == 'x') arr[i][j] = 1;
        }
    }
    scanf("%d", &N);
    for(int i=0;i<N;i++) {
        scanf("%d", &r);
        int res = destroy_mineral(i, R-r+1);
        if(res) check();
        print_group();
    }
    for(int i=1;i<=R;i++) {
        for (int j = 1; j <= C; j++) {
            if(arr[i][j] == 1) printf("x");
            else printf(".");
        }
        printf("\n");
    }
    printf("\n");
    return 0;
}
