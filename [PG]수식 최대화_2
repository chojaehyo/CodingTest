#include <string>
#include <vector>
#include <cmath>
#include <algorithm>
using namespace std;

long long answer;
vector <long long> num;
vector <char> ope, priority;
bool use[5];
char ope_type[3] = {'+', '-', '*'};

long long calc(){
    vector <long long> tmp_num = num;
    vector <char> tmp_ope = ope;
    
    for(int i=0;i<3;i++){ // 우선순위
        for(int j=0;j<tmp_ope.size();j++){
            if(tmp_ope[j] == priority[i]){
                long long tmp_result;
                if(tmp_ope[j] == '+') tmp_result = tmp_num[j] + tmp_num[j+1];
                else if(tmp_ope[j] == '-') tmp_result = tmp_num[j] - tmp_num[j+1];
                else tmp_result = tmp_num[j] * tmp_num[j+1];
                
                tmp_num[j] = tmp_result;
                tmp_num.erase(tmp_num.begin()+j+1);
                tmp_ope.erase(tmp_ope.begin()+j);
                j--; // 위에서 값을 지우면 뒷 값들이 하나씩 당겨지므로 j--해서 맞춰줘야 함!
            }
        }
    }
    return abs(tmp_num[0]);
}

void perm(int idx){
    if(idx >= 3){
        long long result = calc();
        answer = max(answer, result);
    }
    else{
        for(int i=0;i<3;i++){
            if(!use[i]){
                use[i] = true;
                priority.push_back(ope_type[i]);
                perm(idx+1);
                priority.pop_back();
                use[i] = false;
            }
        }
    }
}


long long solution(string expression) {
    string tmp = "";
    
    for (int i=0;i<expression.size();i++){
        if(expression[i] == '+' || expression[i] == '-' || expression[i] == '*'){
            ope.push_back(expression[i]);
            num.push_back(stoi(tmp));
            tmp = "";
        }
        else tmp += expression[i];
            
    }
    num.push_back(stoi(tmp));
    perm(0);
    return answer;
}
