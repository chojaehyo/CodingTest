#include <stdio.h>
#include <vector>
#include <deque>
using namespace std;
const int MAX = 15;

int N, K;
int arr[MAX][MAX];
struct info{
  int x, y, d;
};
vector <info> horse;
deque <int> dq[MAX][MAX];

int dx[] = {0, 0, -1, 1};
int dy[] = {1, -1, 0, 0};

bool check_horse(int idx){
  int x = horse[idx].x;
  int y = horse[idx].y;
  
  if(dq[x][y].size() >= 4) return true;
  else return false;
}

bool move_horse(int idx){
  bool flag = false;
  int x = horse[idx].x;
  int y = horse[idx].y;
  int d = horse[idx].d;
  int Size = dq[x][y].size();
  
  int nx = x+dx[d];
  int ny = y+dy[d];
  // printf("%d %d %d %d\n", x, y, nx, ny);
  if(nx < 1 || nx > N || ny < 1 || ny > N || arr[nx][ny] == 2){
    if(d == 0 || d == 2) d++;
    else d--;
    
    horse[idx].d = d;
    nx = x+dx[d];
    ny = y+dy[d];
    flag = true;
    if(nx < 1 || nx > N || ny < 1 || ny > N || arr[nx][ny] == 2) return false;
  }
  
  if(arr[nx][ny] == 0){
    bool flag = false;
    
    for(int i=0;i<Size;i++){
      int tmp_val = dq[x][y].front();
      dq[x][y].pop_front();
      
      if(tmp_val == idx || flag){
        flag = true;
        
        dq[nx][ny].push_back(tmp_val);
        horse[tmp_val].x = nx;
        horse[tmp_val].y = ny;
      }
      else dq[x][y].push_back(tmp_val);
    }
  }
  else if(arr[nx][ny] == 1){
    
    for(int i=0;i<Size;i++){
      int tmp_val = dq[x][y].back();
      dq[x][y].pop_back();
      
      dq[nx][ny].push_back(tmp_val);
      horse[tmp_val].x = nx;
      horse[tmp_val].y = ny;
      
      if(tmp_val == idx) break;
    }
  }
  if(check_horse(idx)) return true;
  else return false;
}

int main(){
  scanf("%d %d", &N, &K);
  
  for(int i=1;i<=N;i++){
    for(int j=1;j<=N;j++){
      scanf("%d", &arr[i][j]);
    }
  }
  for(int i=0;i<K;i++){
    int a, b, c;
    scanf("%d %d %d", &a, &b, &c);
    horse.push_back({a, b, c-1});
    dq[a][b].push_back(i);
  }
  int Time = 1;
  while(Time <= 1000){
    for(int i=0;i<K;i++){
      if(move_horse(i)){
        printf("%d\n", Time);
        return 0;
      }
    }
    Time++;
  }
  printf("-1\n");
  return 0;
}
