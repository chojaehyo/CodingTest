#include <cstdio>
#include <cstring>
#include <queue>
#include <vector>
using namespace std;
const int MAX = 25;

int N, M, arr[MAX][MAX], arr2[MAX][MAX], total_score;
int dx[] = { -1, 0, 1, 0 };
int dy[] = { 0, 1, 0, -1 };
bool visited[MAX][MAX];
int group_size, rainbow_cnt;
struct compare {
	bool operator()(pair<int, int> a, pair<int, int>b) {
		if (arr[b.first][b.second] == 0) return false;
		if (a.first > b.first) return true;
		else if (a.first == b.first) {
			if (a.second > b.second) return true;
			else return false;
		}
		else return false;
	}
};
priority_queue <pair <int, int>, vector<pair<int, int>>, compare > large_group;

void find_group(int a, int b, int color) {
	memset(visited, 0, sizeof(visited));
	int rainbow = 0;
	queue <pair <int, int> > q;
	priority_queue <pair <int, int>, vector<pair<int, int>>, compare > group;
	q.push(make_pair(a, b));
	group.push(make_pair(a, b));
	visited[a][b] = true;

	while (!q.empty()) {
		int x = q.front().first;
		int y = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];

			if (nx < 0 || nx >= N || ny < 0 || ny >= N || arr[nx][ny] == -1) continue;

			if (!visited[nx][ny]) {
				if (arr[nx][ny] == color || arr[nx][ny] == 0) {
					if (arr[nx][ny] == 0) rainbow++;
					visited[nx][ny] = true;
					q.push(make_pair(nx, ny));
					group.push(make_pair(nx, ny));
				}
			}
		}
	}
	if (group_size < group.size()) {
		group_size = group.size();
		rainbow_cnt = rainbow;
		large_group = group;
	}
	else if (group_size == group.size()) {
		if (rainbow_cnt < rainbow) {
			group_size = group.size();
			rainbow_cnt = rainbow;
			large_group = group;
		}
		else if (rainbow_cnt == rainbow) {
			if (large_group.top().first < group.top().first) {
				group_size = group.size();
				rainbow_cnt = rainbow;
				large_group = group;
			}
			else if (large_group.top().first == group.top().first) {
				if (large_group.top().second < group.top().second) {
					group_size = group.size();
					rainbow_cnt = rainbow;
					large_group = group;
				}
			}
		}
	}
}

void remove_group() {
	
	total_score += (group_size * group_size);
	while (!large_group.empty()) {
		int x = large_group.top().first;
		int y = large_group.top().second;
		large_group.pop();

		arr[x][y] = -5;
	}
}

void gravity() {
	for (int j = 0; j < N; j++) {
		for (int i = N - 1; i >= 1; i--) {
			if (arr[i][j] == -5) {
				for (int ii = i - 1; ii >= 0; ii--) {
					if (arr[ii][j] >= 0) {
						arr[i][j] = arr[ii][j];
						arr[ii][j] = -5;
						break;
					}
					else if (arr[ii][j] == -1) break;
				}
			}
		}
	}
}

void rotate() {
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			arr2[N-1-j][i] = arr[i][j];
		}
	}
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			arr[i][j] = arr2[i][j];
		}
	}
}

int main() {
	scanf("%d %d", &N, &M);

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			scanf("%d", &arr[i][j]);
		}
	}


	while (true) {
		group_size = 0;
		rainbow_cnt = 0;
		memset(arr2, 0, sizeof(arr2));

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if(arr[i][j] > 0) find_group(i, j, arr[i][j]);
			}
		}

		if (group_size < 2) break;
		remove_group();
		gravity();
		rotate();
		gravity();
	}
	

	printf("%d\n", total_score);
	return 0;
}
