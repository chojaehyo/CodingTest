#include <cstdio>
#include <algorithm>
using namespace std;
const int MAX = 10;

int T, N, K, arr[MAX][MAX], max_h, result;
bool visited[MAX][MAX];
int dx[] = { -1, 0, 1, 0 };
int dy[] = { 0, 1, 0, -1 };


void dfs(int x, int y, int h, int usek, int len) {
	result = max(result, len);

	for (int i = 0; i < 4; i++) {
		int nx = x + dx[i];
		int ny = y + dy[i];

		if (nx < 0 || nx >= N || ny < 0 || ny >= N) continue;
		if (!visited[nx][ny]) {
			if (arr[nx][ny] < h) {
				visited[nx][ny] = true;
				dfs(nx, ny, arr[nx][ny], usek, len + 1);
				visited[nx][ny] = false;
			}
			else if (usek == 0 && arr[nx][ny] - K < h) {
				visited[nx][ny] = true;
				dfs(nx, ny, h - 1, 1, len + 1);
				visited[nx][ny] = false;
			}
		}
	}
}

int main() {
	scanf("%d", &T);

	for (int t = 1; t <= T; t++) {
		scanf("%d %d", &N, &K);

		max_h = 0, result = 0;

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				scanf("%d", &arr[i][j]);

				max_h = max(max_h, arr[i][j]);
			}
		}

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (arr[i][j] == max_h) {
					visited[i][j] = true;
					dfs(i, j, arr[i][j], 0, 1);
					visited[i][j] = false;
				}
			}
		}
		printf("#%d %d\n", t, result);
	}
	return 0;
}
