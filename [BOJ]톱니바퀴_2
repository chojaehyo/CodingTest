#include <cstdio>
#include <deque>
using namespace std;

int k;
deque <int> dq[4];

void rotation(int num, int d) {
	if (d == 1) {
		int tmp = dq[num].back();
		dq[num].pop_back();
		dq[num].push_front(tmp);
	}
	else {
		int tmp = dq[num].front();
		dq[num].pop_front();
		dq[num].push_back(tmp);
	}
}

int main() {
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 8; j++) {
			int val;
			scanf("%1d", &val);
			dq[i].push_back(val);
		}
	}
	
	scanf("%d", &k);

	for (int i = 0; i < k; i++) {
		int num, dir;
		scanf("%d %d", &num, &dir);
		num--;

		if (num == 0) {
			if (dq[num][2] != dq[num + 1][6]) {
				if (dq[num + 1][2] != dq[num + 2][6]) {
					if (dq[num + 2][2] != dq[num + 3][6]) rotation(num + 3, -dir);
					rotation(num + 2, dir);
				}
				rotation(num + 1, -dir);
				rotation(num, dir);
			}
			else rotation(num, dir);
		}
		else if (num == 1) {
			if (dq[num - 1][2] != dq[num][6] && dq[num][2] != dq[num + 1][6]) {
				if (dq[num + 1][2] != dq[num + 2][6]) rotation(num + 2, dir);
				rotation(num + 1, -dir);
				rotation(num, dir);
				rotation(num - 1, -dir);
			}
			else if (dq[num - 1][2] != dq[num][6]) {
				rotation(num - 1, -dir);
				rotation(num, dir);
			}
			else if (dq[num][2] != dq[num + 1][6]) {
				if (dq[num + 1][2] != dq[num + 2][6]) rotation(num + 2, dir);
				rotation(num + 1, -dir);
				rotation(num, dir);
			}
			else rotation(num, dir);
		}
		else if (num == 2) {
			if (dq[num - 1][2] != dq[num][6] && dq[num][2] != dq[num + 1][6]) {
				if (dq[num - 2][2] != dq[num - 1][6]) rotation(num - 2, dir);
				rotation(num - 1, -dir);
				rotation(num, dir);
				rotation(num + 1, -dir);
			}
			else if (dq[num - 1][2] != dq[num][6]) {
				if (dq[num - 2][2] != dq[num - 1][6]) rotation(num - 2, dir);
				rotation(num - 1, -dir);
				rotation(num, dir);
			}
			else if (dq[num][2] != dq[num + 1][6]) {
				rotation(num, dir);
				rotation(num + 1, -dir);
			}
			else rotation(num, dir);
		}
		else {
			if (dq[num][6] != dq[num - 1][2]) {
				if (dq[num - 1][6] != dq[num - 2][2]) {
					if (dq[num - 2][6] != dq[num - 3][2]) rotation(num - 3, -dir);
					rotation(num - 2, dir);
				}
				rotation(num - 1, -dir);
				rotation(num, dir);
			}
			else rotation(num, dir);
		}
	}

	int score = 1, total = 0;
	for (int i = 0; i < 4; i++) {
		total += dq[i][0] * score;
		score *= 2;
	}
	printf("%d\n", total);

	return 0;
}
