#define _CRT_SECURE_NO_WARNINGS
#include <cstdio>
#include <queue>
using namespace std;
const int MAX = 25;

int N, arr[MAX][MAX], time;
int dx[] = { -1, 0, 1, 0 };
int dy[] = { 0, 1, 0, -1 };
struct SHARK {
	int x, y, size, eat;
};
SHARK shark;
struct FISH {
	int x, y, dist;
};

struct compare {
	bool operator()(FISH a, FISH b) {
		if (a.dist > b.dist) true;
		else if (a.dist == b.dist) {
			if (a.x > b.x) return true;
			else if (a.x == b.x) {
				if (a.y > b.y) return true;
				else return false;
			}
			else return false;
		}
		else return false;
	}
};

bool find_fish() {
	bool visited[MAX][MAX] = { 0, };
	queue <FISH> q;
	priority_queue <FISH, vector<FISH>, compare> candi;
	q.push({ shark.x, shark.y, 0 });
	visited[shark.x][shark.y] = true;

	while (!q.empty()) {
		int x = q.front().x;
		int y = q.front().y;
		int dist = q.front().dist;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];

			if (nx < 0 || nx >= N || ny < 0 || ny >= N || arr[nx][ny] > shark.size) continue;
			if (!visited[nx][ny]) {
				if (arr[nx][ny] == shark.size || arr[nx][ny] == 0) {
					visited[nx][ny] = true;
					q.push({ nx, ny, dist + 1 });
				}
				else if (arr[nx][ny] < shark.size) {
					FISH fish;
					fish.x = nx, fish.y = ny, fish.dist = dist + 1;
					visited[nx][ny] = true;
					q.push({ nx, ny, dist + 1 });
					candi.push(fish);
				}
			}
		}
	}

	if (candi.size() == 0) return false;
	
	int x = candi.top().x;
	int y = candi.top().y;
	int dist = candi.top().dist;

	arr[x][y] = 0;
	shark.x = x, shark.y = y, shark.eat++;
	
	if (shark.eat == shark.size) {
		shark.eat = 0;
		shark.size++;
	}

	time += dist;
	return true;
}

int main() {
	scanf("%d", &N);

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			scanf("%d", &arr[i][j]);
			if (arr[i][j] == 9) {
				shark.x = i, shark.y = j, shark.size = 2, shark.eat = 0;
				arr[i][j] = 0;
			}
		}
	}

	
	while (1) {
		if (!find_fish()) break;
	}

	printf("%d\n", time);
	return 0;
} 
