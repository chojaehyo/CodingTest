#include <cstdio>
#include <queue>
#include <algorithm>
using namespace std;
const int MAX = 20;

int T, N, W, H, arr[MAX][MAX];
int result = 987987987;
int dx[] = { -1, 0, 1, 0 };
int dy[] = { 0, 1, 0, -1 };
struct info {
	int x, y, cnt;
};

void copy_arr(int A[MAX][MAX], int B[MAX][MAX]) {
	for (int i = 0; i < H; i++) {
		for (int j = 0; j < W; j++) {
			A[i][j] = B[i][j];
		}
	}
}

int check_block_cnt() {
	int cnt = 0;
	for (int i = 0; i < H; i++) {
		for (int j = 0; j < W; j++) {
			if (arr[i][j] > 0) cnt++;
		}
	}
	return cnt;
}

void destroy(int col) {
	queue <info> q;

	for (int i = 0; i < H; i++) {
		if (arr[i][col] != 0) {
			q.push({ i, col, arr[i][col] });
			arr[i][col] = 0;
			break;
		}
	}

	while (!q.empty()) {
		int x = q.front().x;
		int y = q.front().y;
		int cnt = q.front().cnt;
		q.pop();

		for (int i = 1; i < cnt; i++) {
			for (int j = 0; j < 4; j++) {
				int nx = x + dx[j] * i;
				int ny = y + dy[j] * i;

				if (nx < 0 || nx >= H || ny < 0 || ny >= W) continue;

				if (arr[nx][ny] >= 1) {
					q.push({ nx, ny, arr[nx][ny] });
					arr[nx][ny] = 0;
				}
			}
		}
	}
}

void gravity() {
	for (int i = 0; i < W; i++) {
		queue <int> q;

		for (int j = H - 1; j >= 0; j--) {
			if (arr[j][i] > 0) {
				q.push(arr[j][i]);
				arr[j][i] = 0;
			}
		}

		int idx = H - 1;
		while (!q.empty()) {
			int val = q.front();
			q.pop();

			arr[idx--][i] = val;
		}
	}
}
void comb(int idx) {
	if (idx >= N) {
		int res = check_block_cnt();
		result = min(res, result);
	}
	else {
		int tmp_arr[MAX][MAX] = { 0 };
		copy_arr(tmp_arr, arr);

		for (int i = 0; i < W; i++) {
			destroy(i);
			gravity();
			comb(idx + 1);
			copy_arr(arr, tmp_arr);
		}
	}
}

int main() {
	scanf("%d", &T);
	for (int t = 1; t <= T; t++) {
		scanf("%d %d %d", &N, &W, &H);
		result = 987987987;

		for (int i = 0; i < H; i++) {
			for (int j = 0; j < W; j++) {
				scanf("%d", &arr[i][j]);
			}
		}
		
		comb(0);
		printf("#%d %d\n", t, result);
	}
	return 0;
}
