#include <cstdio>
#include <cstring>
#include <queue>
using namespace std;
const int MAX = 55;

int r, c, sx, sy;
char temp[MAX][MAX];
int arr[MAX][MAX], water[MAX][MAX];
struct loc{
  int x, y;
};
int dx[] = {0, 1, 0, -1};
int dy[] = {1, 0, -1, 0};
bool visited[MAX][MAX];
queue <loc> wq;

void fill_water(){
  while(!wq.empty()){
    int x = wq.front().x;
    int y = wq.front().y;
    visited[x][y] = true;
    wq.pop();
    
    for(int i=0;i<4;i++){
      int nx = x+dx[i];
      int ny = y+dy[i];
      
      if(nx < 0 || nx >= r || ny < 0 || ny >= c || water[nx][ny] == -1 || water[nx][ny] == -2) continue;
      if(!visited[nx][ny] && water[nx][ny] == 0){
        visited[nx][ny] = true;
        water[nx][ny] = water[x][y]+1;
        wq.push({nx, ny});
      }
    }
  }  
}
int find_D(int a, int b){
  visited[a][b] = true;
  queue <loc> sq;
  sq.push({a, b});  
  while(!sq.empty()){
    int x = sq.front().x;
    int y = sq.front().y;
    sq.pop();
    
    for(int i=0;i<4;i++){
      int nx = x+dx[i];
      int ny = y+dy[i];
      
      if(arr[nx][ny] == -2) return arr[x][y]+1;
      if(nx < 0 || nx >= r || ny < 0 || ny >= c || arr[nx][ny] == -1) continue;
      if(!visited[nx][ny] && arr[nx][ny] == 0){
        if(water[nx][ny] > arr[x][y]+1 || water[nx][ny] == 0){
          visited[nx][ny] = true;
          arr[nx][ny] = arr[x][y]+1;
          sq.push({nx, ny});
        }
      }
    }
  }
  return -1;  
}
int main(){
  scanf("%d %d", &r, &c);
  for(int i=0;i<r;i++) scanf("%s", &temp[i]);
  for(int i=0;i<r;i++){
    for(int j=0;j<c;j++){
      if(temp[i][j] == '*') wq.push({i, j}), arr[i][j] = -1;
      else if(temp[i][j] == 'X') arr[i][j] = -1, water[i][j] = -1;
      else if(temp[i][j] == 'D') arr[i][j] = -2, water[i][j] = -2;
      else if(temp[i][j] == 'S') sx= i, sy = j, water[i][j] = -1;
    }
  }
  fill_water();
  memset(visited, 0, sizeof(visited));
  int result = find_D(sx, sy);
  if(result == -1) printf("KAKTUS");
  else printf("%d\n", result);
  return 0;
}
