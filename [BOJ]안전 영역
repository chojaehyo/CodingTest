#include <stdio.h>
#include <cstring>
#include <queue>
using namespace std;
const int MAX = 105;

int n, max_area, arr[MAX][MAX], water[MAX][MAX];
int max_h = -1;
bool visited[MAX][MAX];
int dx[] = { 0, 1, 0, -1 };
int dy[] = { -1, 0, 1, 0 };

void fill_water(int val) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (arr[i][j] <= val) water[i][j] = 1;
			else water[i][j] = 0;
		}
	}
}

void bfs(int a, int b) {
	visited[a][b] = true;
	queue <pair<int, int>> q;
	q.push(make_pair(a, b));

	while (!q.empty()) {
		int x = q.front().first;
		int y = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];

			if (nx < 0 || nx >= n || ny < 0 || ny >= n || water[nx][ny] == 1) continue;
			if (!visited[nx][ny] && water[nx][ny] == 0) {
				visited[nx][ny] = true;
				q.push(make_pair(nx, ny));
			}
		}

	}
}

void check_area() {
	int cnt = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (!visited[i][j] && water[i][j] == 0) {
				cnt++;
				bfs(i, j);
			}
		}
	}
	if (max_area < cnt) max_area = cnt;
}

int main() {
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			scanf("%d", &arr[i][j]);
			if (arr[i][j] > max_h) max_h = arr[i][j];
		}
	}

	for (int i = 0; i < max_h; i++) {
		memset(visited, 0, sizeof(visited));
		fill_water(i);
		check_area();
	}

	printf("%d\n", max_area);
	return 0;
}
