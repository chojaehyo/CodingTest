#include <cstdio>
#include <cstring>
#include <vector>
#include <deque>
#include <cmath>
using namespace std;
const int MAX = 105;

int N, K, row = 1, col = 1;
int arr[MAX][MAX], arr2[MAX][MAX];
int dx[] = {0, 1, 0, -1};
int dy[] = {1, 0, -1, 0};
deque <int> fishbowl;

void find_min(){
    int min_val = 10005;
    vector <int> min_idx;

    for(int i=0;i<N;i++){
        if(fishbowl[i] < min_val){
            min_idx.clear();
            min_idx.push_back(i);
            min_val = fishbowl[i];
        }
        else if (fishbowl[i] == min_val){
            min_idx.push_back(i);
        }
    }

    for(int i=0;i<min_idx.size();i++){
        fishbowl[min_idx[i]]++;
    }
}

void rotate_fishbowl(){
    memset(arr, 0, sizeof(arr));
    int n = sqrt(N);
    int x, y;

    if ((n+1) * n <= N){
        x = n+1, y = n+N-n*(n+1);
        row = x, col = y;
        for(int j=y;j>=1;j--) {
            arr[x][j] = fishbowl.back();
            fishbowl.pop_back();
        }
        y = 1;

        for(int i=n;i>=1;i--){
            arr[i][y] = fishbowl.back();
            fishbowl.pop_back();
        }
        x = 1;
        int d = 0;
        for(int i=n-1;i>=1;i--) {
            for (int k = 0; k < 2; k++) {
                for(int j=1;j<=i;j++) {
                    int nx = x + dx[d];
                    int ny = y + dy[d];
                    arr[nx][ny] = fishbowl.back();
                    fishbowl.pop_back();
                    x = nx, y = ny;
                }
                d = (d+1)%4;
            }
        }
    }
    else if (n * n <= N){
        x = n, y = n+N-n*n;
        row = x, col = y;
        for(int j=y;j>=1;j--){
            arr[x][j] = fishbowl.back();
            fishbowl.pop_back();
        }
        y = 1;
        int d = 3;

        for(int i=n-1;i>=1;i--){
            for(int k=0;k<2;k++){
                for(int j=1;j<=i;j++){
                    int nx = x + dx[d];
                    int ny = y + dy[d];
                    arr[nx][ny] = fishbowl.back();
                    fishbowl.pop_back();
                    x = nx, y = ny;
                }
                d = (d+1)%4;
            }
        }
    }
}

void move_fish(){
    memset(arr2, 0, sizeof(arr2));

    for(int i=1;i<=row;i++){
        for(int j=1;j<=col;j++){
            if(arr[i][j] > 0){
                for(int d=0;d<2;d++){
                    int nx = i + dx[d];
                    int ny = j + dy[d];

                    if(nx < 1 || nx > row || ny < 1 || ny > col || arr[nx][ny] == 0) continue;

                    if(arr[nx][ny] > arr[i][j]){
                        int val = (arr[nx][ny]-arr[i][j]) / 5;
                        if(val > 0){
                            arr2[nx][ny] -= val;
                            arr2[i][j] += val;
                        }
                    }

                    else if(arr[nx][ny] < arr[i][j]){
                        int val = (arr[i][j]-arr[nx][ny]) / 5;
                        if(val > 0){
                            arr2[i][j] -= val;
                            arr2[nx][ny] += val;
                        }
                    }
                }
            }
        }
    }
    for(int i=1;i<=row;i++) {
        for (int j = 1; j <= col; j++) {
            arr[i][j] += arr2[i][j];
        }
    }
}

void make_one_line(){
    for(int j=1;j<=col;j++){
        for(int i=row;i>=1;i--){
            if(arr[i][j] == 0) continue;
            fishbowl.push_back(arr[i][j]);
        }
    }
}

void fold_half(){
    int val = N/2;
    memset(arr, 0, sizeof(arr));

    for(int j=val;j>=1;j--) arr[1][val-j+1] = fishbowl[j-1];
    for(int j=val;j<N;j++) arr[2][j-val+1] = fishbowl[j];
    fishbowl.clear();

    int val2 = val/2;
    for(int i=1;i<=2;i++) {
        for (int j = val2 + 1; j <= val; j++) {
            arr2[i+2][j-val2] = arr[i][j];
        }
        for(int j=1;j<=val2;j++){
            arr2[3-i][val2+1-j] = arr[i][j];
        }
    }

    memset(arr, 0, sizeof(arr));
    for(int i=1;i<=4;i++){
        for(int j=1;j<=val2;j++){
            arr[i][j] = arr2[i][j];
        }
    }
    row = 4, col = val2;
}

bool check(){
    int max_val = -1;
    int min_val = 10005;

    for(int i=0;i<fishbowl.size();i++){
        if(fishbowl[i] > max_val) max_val = fishbowl[i];
        if(fishbowl[i] < min_val) min_val = fishbowl[i];
    }

    if(max_val - min_val <= K) return true;
    else return false;
}

int main(){
    scanf("%d %d", &N, &K);
    for(int i=0;i<N;i++) {
        int val;
        scanf("%d", &val);
        fishbowl.push_back(val);
    }

    int time = 1;

    while(1){
        find_min();
        rotate_fishbowl();
        move_fish();
        make_one_line();
        fold_half();

        move_fish();
        make_one_line();
        if(check()) break;
        time++;
    }
    printf("%d\n", time);
    return 0;
}
