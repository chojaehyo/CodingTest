#include <cstdio>
#include <queue>
#include <algorithm>
using namespace std;
const int MAX = 55;

int n, k, arr[MAX][MAX], result = 987987987;
int dx[] = { -1, 0, 1, 0 };
int dy[] = { 0, 1, 0, -1 };
struct INFO{
    int x, y, d, dist;
};

bool can_move(int dir, int x, int y) {
    if (dir == 0) {
        if (arr[x][y] == 0 || arr[x][y] == 1 || arr[x][y] == 4) return true;
    }
    else if (dir == 1) {
        if (arr[x][y] == 1 || arr[x][y] == 3 || arr[x][y] == 5) return true;
    }
    else if (dir == 2) {
        if (arr[x][y] == 2 || arr[x][y] == 3 || arr[x][y] == 4) return true;
    }
    else {
        if (arr[x][y] == 0 || arr[x][y] == 2 || arr[x][y] == 5) return true;
    }
    return false;
}

int get_direction(int val, int d){
    if(val == 0){
        if(d == 0) return 1;
        else if(d == 3) return 2;
    }
    else if(val == 1){
        if(d == 0) return 3;
        else if(d == 1) return 2;
    }
    else if(val == 2){
        if(d == 2) return 1;
        else if(d == 3) return 0;
    }
    else if(val == 3){
        if(d == 1) return 0;
        else if(d == 2) return 3;
    }
    else return d;
}

int check_route() {
    queue <INFO> q;
    q.push({0, 0, 1, 1});

    while (!q.empty()) {
        int x = q.front().x;
        int y = q.front().y;
        int d = q.front().d;
        int dist = q.front().dist;
        q.pop();

        if(can_move(d, x, y)){
            int nd = get_direction(arr[x][y], d);
            int nx = x + dx[nd];
            int ny = y + dy[nd];

            if(nx == n-1 && ny == n-1){
                if(can_move(nd, nx, ny)) return dist + 1;
                else return -1;
            }
            if(nx < 0 || nx >= n || ny < 0 || ny >= n) return -1;
            else q.push({nx, ny, nd, dist+1});
        }
        else return -1;
    }
    return -1;
}

void change_tile(int idx) {
    if (idx >= k) {
        if ((arr[0][0] == 1 || arr[0][0] == 5) && (arr[n-1][n-1] == 2 || arr[n-1][n-1] == 5)) {
            int res = check_route();
            if (res != -1) result = min(result, res);
        }
        else return;
    }
    else {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < 6; k++) {
                    if (arr[i][j] != k) {
                        int tmp = arr[i][j];
                        arr[i][j] = k;
                        change_tile(idx + 1);
                        arr[i][j] = tmp;
                    }
                }
            }
        }
    }
}

int main() {
    scanf("%d %d", &n, &k);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &arr[i][j]);
        }
    }

    change_tile(0);

    if (result == 987987987) printf("-1\n");
    else printf("%d\n", result);

    return 0;
}
