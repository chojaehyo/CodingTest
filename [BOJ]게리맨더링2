#include <cstdio>
#include <algorithm>
using namespace std;
const int MAX = 25;

int N, result=987987987;
int arr[MAX][MAX], arr2[MAX][MAX];
struct POS {
	int x, y;
};
POS position[4];

void calculate(){
  int people[6] = {0};
  for(int i=0;i<N;i++){
    for(int j=0;j<N;j++){
      people[arr2[i][j]] += arr[i][j];
    }
  }
  sort(people, people+6);
  int diff = people[5]-people[1];
  result = min(result, diff);
}

bool isPossible(int x, int y, int d1, int d2) {
	if (x + d1 >= N || y - d1 < 0) return false;
	if (x + d2 >= N || y + d2 >= N) return false;
	if (x + d1 + d2 >= N || y - d1 + d2 >= N) return false;
	if (x + d2 + d1 >= N || y + d2 - d1 < 0) return false;
	return true;
}

void draw_line(int x, int y, int d1, int d2) {
  // printf("%d %d\n", x, y);
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			arr2[i][j] = 5;
		}
	}
	int area = 0;
	for (int i = 0; i < position[1].x; i++) {
	  if(i >= position[0].x) area++;
		for (int j = 0; j <= position[0].y-area; j++) {
			arr2[i][j] = 1;
		}
	}
	area = 0;
	for (int i = 0; i <= position[2].x; i++) {
	  if(i > position[0].x) area++;
		for (int j = position[0].y+1+area; j < N; j++) {
			arr2[i][j] = 2;
		}
	}
	area = 0;
	for (int i = N - 1; i >= position[1].x; i--) {
	  if(i < position[3].x) area++;
		for (int j = 0; j < position[3].y - area; j++) {
			arr2[i][j] = 3;
		}
	}
	area = 0;
	for (int i = N-1; i > position[2].x; i--) {
	  if(i <= position[3].x) area++;
		for (int j = position[3].y+area; j < N; j++) {
			arr2[i][j] = 4;
		}
	}
	calculate();
}
int main() {
	scanf("%d", &N);
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			scanf("%d", &arr[i][j]);
		}
	}
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			for (int d1 = 1; d1 <= j; d1++) {
				for (int d2 = 1; d2 < N - j; d2++) {
					if (isPossible(i, j, d1, d2)) {
						position[0].x = i, position[0].y = j;
						position[1].x = i + d1, position[1].y = j - d1;
						position[2].x = i + d2, position[2].y = j + d2;
						position[3].x = i + d1 + d2, position[3].y = j - d1 + d2;
						draw_line(i, j, d1, d2);
					}
				}
			}
		}
	}
	printf("%d\n", result);
	return 0;
}
