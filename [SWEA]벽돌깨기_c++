#include <cstdio>
#include <cstring>
#include <queue>
#include <algorithm>
using namespace std;
const int MAX = 20;
const int INF = 987987987;

int T, N, W, H, arr[MAX][MAX], result;
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};
struct INFO{
    int x, y, val;
};

int count_brick(){
    int cnt = 0;
    for(int i=0;i<H;i++){
        for(int j=0;j<W;j++){
            if(arr[i][j] > 0) cnt++;
        }
    }
    return cnt;
}

void save_state(int A[MAX][MAX], int B[MAX][MAX]){
    for(int i=0;i<H;i++){
        for(int j=0;j<W;j++) A[i][j] = B[i][j];
    }
}

void gravity(){
    for(int j=0;j<W;j++){
        for(int i=H-1;i>0;i--){
            if(arr[i][j] == 0){
                for(int k=i-1;k>=0;k--){
                    if(arr[k][j] > 0){
                        arr[i][j] = arr[k][j];
                        arr[k][j] = 0;
                        break;
                    }
                }
            }
        }
    }
}

void break_brick(int col){
    queue <INFO> q;

    for(int i=0;i<H;i++){
        if(arr[i][col] > 0){
            q.push({i, col, arr[i][col]});
            arr[i][col] = 0;
            break;
        }
    }

    while(!q.empty()){
        int x = q.front().x;
        int y = q.front().y;
        int val = q.front().val;
        q.pop();

        for(int i=1;i<val;i++){
            for(int j=0;j<4;j++){
                int nx = x + dx[j]*i;
                int ny = y + dy[j]*i;
                if(nx < 0 || nx >= H || ny < 0 || ny >= W || arr[nx][ny] == 0) continue;
                q.push({nx, ny, arr[nx][ny]});
                arr[nx][ny] = 0;
            }
        }
    }
    gravity();
}

void choose_brick(int idx){
    if(idx >= N){
        int cur_cnt = count_brick();
        result = min(result, cur_cnt);
    }
    else{
        for(int i=0;i<W;i++){
            int tmp[MAX][MAX] = {0};
            save_state(tmp, arr);
            break_brick(i);
            choose_brick(idx+1);
            save_state(arr, tmp);
        }
    }
}

int main(){
    scanf("%d", &T);

    for(int t=1;t<=T;t++){
        memset(arr, 0, sizeof(arr));
        result = INF;
        scanf("%d %d %d", &N, &W, &H);

        for(int i=0;i<H;i++){
            for(int j=0;j<W;j++){
                scanf("%d", &arr[i][j]);
            }
        }
        choose_brick(0);
        printf("#%d %d\n", t, result);
    }
    return 0;
}
