#include <cstdio>
#include <queue>
using namespace std;

int sx, sy, kx, ky, result;
int dx[8][3] = { {-1, -2, -3}, {-1, -2, -3}, {0, -1, -2}, {0, 1, 2}, {1, 2, 3}, {1, 2, 3}, {0, -1, -2}, {0, 1, 2} };
int dy[8][3] = { {0, -1, -2}, {0, 1, 2}, {-1, -2, -3}, {-1, -2, -3}, {0, -1, -2}, {0, 1, 2}, {1, 2, 3}, {1, 2, 3} };
bool visited[10][9];

struct info {
	int x, y, cnt;
};

bool check(int a, int b) {
	visited[a][b] = true;
	queue <info> q;
	q.push({ a, b, 0 });

	while (!q.empty()) {
		int x = q.front().x;
		int y = q.front().y;
		int cnt = q.front().cnt;
		q.pop();

		for (int i = 0; i < 8; i++) {
			for (int j = 0; j < 3; j++) {
				int nx = x + dx[i][j];
				int ny = y + dy[i][j];

				if (nx < 0 || nx >= 10 || ny < 0 || ny >= 9) break;

				if (nx == kx && ny == ky) {
					if (j != 2) break;
					else {
						result = cnt + 1;
						return true;
					}
				}

				if (!visited[nx][ny] && j == 2) {
					visited[nx][ny] = true;
					q.push({ nx, ny, cnt + 1 });
				}
			}
		}
	}
	return false;
}

int main() {
	scanf("%d %d", &sx, &sy);
	scanf("%d %d", &kx, &ky);

	if (check(sx, sy)) printf("%d\n", result);
	else printf("-1\n");
	return 0;
}
