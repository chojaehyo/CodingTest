// 11:11
#include <cstdio>
#include <queue>
#include <cstring>
using namespace std;
const int MAX = 25;

int N, M, K, arr[MAX][MAX], result;
int dx[] = {0, 1, 0, -1};
int dy[] = {1, 0, -1, 0};
int dice[4][3] = {{0, 2, 0}, {4, 1, 3}, {0, 5, 0}, {0, 6, 0}};
bool visited[MAX][MAX];

bool check_range(int x, int y) {return x >= 0 && x < N && y >= 0 && y < M;}

void change_dice(int d){
    if(d == 0){
        int tmp = dice[1][0];
        dice[1][0] = dice[3][1];
        dice[3][1] = dice[1][2];
        dice[1][2] = dice[1][1];
        dice[1][1] = tmp;
    }
    else if(d == 1){
        int tmp = dice[3][1];
        dice[3][1] = dice[2][1];
        dice[2][1] = dice[1][1];
        dice[1][1] = dice[0][1];
        dice[0][1] = tmp;
    }
    else if(d == 2){
        int tmp = dice[1][0];
        dice[1][0] = dice[1][1];
        dice[1][1] = dice[1][2];
        dice[1][2] = dice[3][1];
        dice[3][1] = tmp;
    }
    else{
        int tmp = dice[0][1];
        dice[0][1] = dice[1][1];
        dice[1][1] = dice[2][1];
        dice[2][1] = dice[3][1];
        dice[3][1] = tmp;
    };
}

void get_score(int a, int b){
    memset(visited, 0, sizeof(visited));
    queue <pair<int, int>> q;
    q.push({a, b});
    visited[a][b] = true;
    int cnt = 1;

    while(!q.empty()){
        int x = q.front().first;
        int y = q.front().second;
        q.pop();

        for(int i=0;i<4;i++){
            int nx = x + dx[i];
            int ny = y + dy[i];

            if(!check_range(nx, ny)) continue;
            if(!visited[nx][ny]){
                visited[nx][ny] = true;
                if(arr[a][b] == arr[nx][ny]){
                    cnt++;
                    q.push({nx, ny});
                }
            }
        }
    }
    result += (cnt * arr[a][b]);
}

int main(){
    scanf("%d %d %d", &N, &M, &K);
    for(int i=0;i<N;i++){
        for(int j=0;j<M;j++){
            scanf("%d", &arr[i][j]);
        }
    }
    int x = 0, y = 0, d = 0;

    for(int k=0;k<K;k++){
        int nx = x + dx[d];
        int ny = y + dy[d];

        if(!check_range(nx, ny)){
            d = (d + 2) % 4;
            nx = x + dx[d];
            ny = y + dy[d];
        }
        change_dice(d);
        get_score(nx, ny);

        if(dice[3][1] > arr[nx][ny]) d = (d + 1) % 4;
        else if(dice[3][1] < arr[nx][ny]) d = (d + 3) % 4;
        x = nx; y = ny;
    }
    printf("%d\n", result);
    return 0;
}
