#include <cstdio>
#include <cstring>
#include <vector>
using namespace std;
const int MAX = 5;

int M, S, fx, fy, fd, sx, sy, smell[MAX][MAX];
int dfx[] = { 0, -1, -1, -1, 0, 1, 1, 1 };
int dfy[] = { -1, -1, 0, 1, 1, 1, 0, -1 };
int dsx[] = { -1, 0, 1, 0 };
int dsy[] = { 0, -1, 0, 1 };

vector <int> arr[MAX][MAX], tmp_arr[MAX][MAX];
vector <int> shark_dir, final_shark_dir;
int max_catch_fish;

void copy_arr(vector <int> A[][MAX], vector <int> B[][MAX]) {
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			A[i][j] = B[i][j];
		}
	}
}

bool check_range(int x, int y) {
	return x >= 0 && x < 4 && y >= 0 && y < 4;
}

void move_fish() {
	vector <int> tmp[MAX][MAX];

	for (int x = 0; x < 4; x++) {
		for (int y = 0; y < 4; y++) {
			for (int k = 0; k < arr[x][y].size(); k++) {
				int d = arr[x][y][k];
				bool can_move = false;

				for (int dir = 0; dir < 8; dir++) {
					int nx = x + dfx[d];
					int ny = y + dfy[d];

					if (!check_range(nx, ny) || (nx == sx && ny == sy) || smell[nx][ny]) d = (d + 7) % 8;
					else {
						can_move = true;
						tmp[nx][ny].push_back(d);
						break;
					}
				}
				if (!can_move) tmp[x][y].push_back(d);
			}
		}
	}
	copy_arr(arr, tmp);
}

void find_shark_dir(int idx, int x, int y, int catch_fish) {
	if (shark_dir.size() == 3) {
		if (max_catch_fish < catch_fish) {
			max_catch_fish = catch_fish;
			final_shark_dir = shark_dir;
		}
	}
	else {
		for (int i = 0; i < 4; i++) {
			int nx = x + dsx[i];
			int ny = y + dsy[i];

			if (!check_range(nx, ny)) continue;

			shark_dir.push_back(i);
			int cnt = arr[nx][ny].size();

			vector <int> tmp = arr[nx][ny];
			arr[nx][ny].clear();

			find_shark_dir(idx + 1, nx, ny, catch_fish + cnt);

			shark_dir.pop_back();
			arr[nx][ny] = tmp;
		}
	}
}

void move_shark(int time) {
	shark_dir = final_shark_dir;
	for (int i = 0; i < shark_dir.size(); i++) {
		int nx = sx + dsx[shark_dir[i]];
		int ny = sy + dsy[shark_dir[i]];

		if (arr[nx][ny].size() > 0) {
			smell[nx][ny] = time;
			arr[nx][ny].clear();
		}
		sx = nx; sy = ny;
	}
}

void remove_smell(int time) {
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			if (smell[i][j] == time - 2) {
				smell[i][j] = 0;
			}
		}
	}
}

void finish_copy_magic() {
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			for (int k = 0; k < tmp_arr[i][j].size(); k++) {
				arr[i][j].push_back(tmp_arr[i][j][k]);
			}
		}
	}
}

int main() {
	scanf("%d %d", &M, &S);

	for (int i = 0; i < M; i++) {
		scanf("%d %d %d", &fx, &fy, &fd);
		fx--; fy--; fd--;
		arr[fx][fy].push_back(fd);
	}
	scanf("%d %d", &sx, &sy);
	sx--; sy--;

	for (int i = 0; i < S; i++) {
		copy_arr(tmp_arr, arr);
		move_fish();
		shark_dir.clear();
		final_shark_dir.clear();
		max_catch_fish = -1;
		find_shark_dir(0, sx, sy, 0);
		move_shark(i + 3);
		remove_smell(i + 3);
		finish_copy_magic();
	}

	int result = 0;
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			result += arr[i][j].size();
		}
	}
	printf("%d\n", result);
	return 0;
}
