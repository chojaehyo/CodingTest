#include <stdio.h>
#include <cstring>
#include <queue>
using namespace std;
const int MAX = 55;

int n, m;
char map[MAX][MAX];
int count[MAX][MAX];
bool visited[MAX][MAX];
struct loc{
  int x, y;
};
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};

void get_result(int a, int b){
  visited[a][b] = true;
  queue <loc> q;
  q.push({a, b});
  
  while(!q.empty()){
    int x = q.front().x;
    int y = q.front().y;
    q.pop();
    
    for(int i=0;i<4;i++){
      int nx = x+dx[i];
      int ny = y+dy[i];
      
      if(nx < 0 || nx >= n || ny < 0 || ny >= m || map[nx][ny] == 'W') continue;
      if(!visited[nx][ny] && map[nx][ny] == 'L'){
        count[nx][ny] = count[x][y]+1;
        visited[nx][ny] = true;
        q.push({nx, ny});
      }
    }
  }
}

int get_cnt(){
  int max_val = -1;
  for(int i=0;i<n;i++){
    for(int j=0;j<m;j++){
      if(max_val < count[i][j]) max_val = count[i][j];
    }
  }
  return max_val;
}
int main(){
  scanf("%d %d", &n, &m);
  for(int i=0;i<n;i++){
    scanf("%s", map[i]);
  }
  int result = -1;
  for(int i=0;i<n;i++){
    for(int j=0;j<m;j++){
      if(map[i][j] == 'L'){
        memset(visited, 0, sizeof(visited));
        memset(count, 0, sizeof(count));
        get_result(i, j);
        int res = get_cnt();
        if(res > result) result = res;
      }
    }
  }
  printf("%d\n", result);
  return 0;
}
