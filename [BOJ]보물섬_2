#include <cstdio>
#include <cstring>
#include <queue>
using namespace std;
const int MAX = 55;

int n, m, result, arr[MAX][MAX], cnt[MAX][MAX];
int dx[] = { 0, 1, 0, -1 };
int dy[] = { -1, 0, 1, 0 };
bool visited[MAX][MAX];

void bfs(int a, int b) {
	visited[a][b] = true;
	queue <pair<int, int>> q;
	q.push(make_pair(a, b));

	while (!q.empty()) {
		int x = q.front().first;
		int y = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];

			if (nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
			if (!visited[nx][ny] && arr[nx][ny] == 0) {
				visited[nx][ny] = true;
				cnt[nx][ny] = cnt[x][y] + 1;
				if (cnt[nx][ny] > result) result = cnt[nx][ny];
				q.push(make_pair(nx, ny));
			}
		}
	}
}

int main() {
	scanf("%d %d", &n, &m);

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			char tmp;
			scanf(" %1c", &tmp);
			if (tmp == 'W') arr[i][j] = 1;
		}
	}
  
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (arr[i][j] == 0) {
				memset(visited, 0, sizeof(visited));
				memset(cnt, 0, sizeof(cnt));
				bfs(i, j);
			}
		}
	}
	printf("%d\n", result);
	return 0;
}
