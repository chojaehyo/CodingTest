#include <stdio.h>
#include <cstring>
#include <queue>
using namespace std;
const int MAX = 55;

bool run = true;
int n, m, arr[MAX][MAX];
bool visited[MAX][MAX];
int dx[] = { -1, -1, -1, 0, 0, 1, 1, 1 };
int dy[] = { -1, 0, 1, -1, 1, -1, 0, 1 };

void bfs(int a, int b) {
	queue <pair<int, int>> q;
	q.push(make_pair(a, b));
	visited[a][b] = true;

	while (!q.empty()) {
		int x = q.front().first;
		int y = q.front().second;
		q.pop();

		for (int i = 0; i < 8; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];

			if (nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
			if (!visited[nx][ny] && arr[nx][ny] == 1) {
				visited[nx][ny] = true;
				q.push(make_pair(nx, ny));
			}
		}

	}
}
int main() {
	while (run) {
		scanf("%d %d", &m, &n);
		if (m == 0 && n == 0) {
			run = false;
			break;
		}
		memset(visited, 0, sizeof(visited));

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				scanf("%d", &arr[i][j]);
			}
		}

		int cnt = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (!visited[i][j] && arr[i][j] == 1) {
					cnt++;
					bfs(i, j);
				}
			}
		}
		printf("%d\n", cnt);
	}

	return 0;
}
