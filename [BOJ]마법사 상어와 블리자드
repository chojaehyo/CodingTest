#include <cstdio>
#include <cstring>
#include <deque>
using namespace std;
const int MAX = 55;

int N, M, total_score, arr[MAX][MAX], cnt[5];
int dx[] = { 0, 1, 0, -1 };
int dy[] = { -1, 0, 1, 0 };

void destroy(int d, int s, int x, int y) {
	for (int i = 0; i < s; i++) {
		int nx = x + dx[d];
		int ny = y + dy[d];
		arr[nx][ny] = 0;
		x = nx, y = ny;
	}
}

void fill_arr(deque <int> total_num) {
	memset(arr, 0, sizeof(arr));
	int x = (N + 1) / 2, y = (N + 1) / 2;
	int d = 0;
	bool stop = false;

	for (int i = 1; i <= N; i++) {
		for (int j = 0; j < 2; j++) {
			for (int k = 1; k <= i; k++) {
				int nx = x + dx[d];
				int ny = y + dy[d];
				if (nx < 1 || nx > N || ny < 1 || ny > N) {
					stop = true;
					break;
				}
				if (!total_num.empty()) {
					int num = total_num.front();
					total_num.pop_front();
					arr[nx][ny] = num;
				}
				x = nx, y = ny;
			}
			if (stop) break;
			d = (d + 1) % 4;
		}
		if (stop) break;
	}

}

void fill_blank(int x, int y, int d) {
	bool stop = false;
	deque <int> total_num;

	for (int i = 1; i <= N; i++) {
		for (int j = 0; j < 2; j++) {
			for (int k = 1; k <= i; k++) {
				int nx = x + dx[d];
				int ny = y + dy[d];
				if (nx < 1 || nx > N || ny < 1 || ny > N) {
					stop = true;
					break;
				}
				if (arr[nx][ny] != 0) total_num.push_back(arr[nx][ny]);
				x = nx, y = ny;
			}
			if (stop) break;
			d = (d + 1) % 4;
		}
		if (stop) break;
	}

	fill_arr(total_num);
}

bool find_group(int x, int y, int d) {
	bool result = false, stop = false;
	deque <pair<int, int> > same;
	int pre_num = 0;

	for (int i = 1; i <= N; i++) {
		for (int j = 0; j < 2; j++) {
			for (int k = 1; k <= i; k++) {
				int nx = x + dx[d];
				int ny = y + dy[d];
				if (nx < 1 || nx > N || ny < 1 || ny > N) {
					stop = true;
					break;
				}
				if (same.empty()) {
					same.push_back(make_pair(nx, ny));
					pre_num = arr[nx][ny];
				}
				else {
					if (pre_num == arr[nx][ny]) same.push_back(make_pair(nx, ny));
					else {
						if (same.size() >= 4) {
							result = true;
							while (!same.empty()) {
								int xx = same.front().first;
								int yy = same.front().second;
								same.pop_front();

								cnt[arr[xx][yy]]++;
								arr[xx][yy] = 0;
							}
							same.push_back(make_pair(nx, ny));
							pre_num = arr[nx][ny];
						}
						else {
							same.clear();
							same.push_back(make_pair(nx, ny));
							pre_num = arr[nx][ny];
						}
					}
				}
				x = nx, y = ny;
			}
			if (stop) break;
			d = (d + 1) % 4;
		}
		if (stop) break;
	}
	return result;
}

void change_group(int x, int y, int d) {
	deque <int> total_num;
	int cnt = 0, pre_num = 0;
	bool stop = false;

	for (int i = 1; i <= N; i++) {
		for (int j = 0; j < 2; j++) {
			for (int k = 1; k <= i; k++) {
				int nx = x + dx[d];
				int ny = y + dy[d];

				if (nx < 1 || nx > N || ny < 1 || ny > N) {
					stop = true;
					break;
				}
				if (pre_num == 0) {
					cnt = 1;
					pre_num = arr[nx][ny];
				}
				else if (pre_num == arr[nx][ny]) cnt++;
				else {
					total_num.push_back(cnt);
					total_num.push_back(pre_num);
					cnt = 1, pre_num = arr[nx][ny];
				}
				x = nx, y = ny;
			}
			if (stop) break;
			d = (d + 1) % 4;
		}
		if (stop) break;
	}

	fill_arr(total_num);
}

int main() {
	scanf("%d %d", &N, &M);

	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			scanf("%d", &arr[i][j]);
		}
	}

	int sx = (N + 1) / 2, sy = (N + 1) / 2;
	
	for (int i = 0; i < M; i++) {
		int d, s;
		scanf("%d %d", &d, &s);
		if (d == 1) d = 3;
		else if (d == 2) d = 1;
		else if (d == 3) d = 0;
		else d = 2;
		
		destroy(d, s, sx, sy);
		fill_blank(sx, sy, 0);
		while (find_group(sx, sy, 0)) {
			fill_blank(sx, sy, 0);
		}
		change_group(sx, sy, 0);
	}
	
	for (int i = 1; i <= 3; i++) total_score += i * cnt[i];
	printf("%d\n", total_score);
	return 0;
}
