#include <cstdio>
#include <cstring>
#include <queue>
using namespace std;
const int MAX = 10;
int n, m;
int map[MAX][MAX], tmp[MAX][MAX];
struct loc {
	int x, y;
};
queue <loc> q;
int result = -1;
bool visited[MAX][MAX];
int dx[4] = { -1, 0, 1, 0 };
int dy[4] = { 0, 1, 0, -1 };
int get_count() {
	int total = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (tmp[i][j] == 0) total++;
		}
	}
	return total;
}
void fill_tmp() {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			tmp[i][j] = map[i][j];
		}
	}
}
void bfs() {
	while (!q.empty()) {
		int x = q.front().x;
		int y = q.front().y;
		q.pop();
		visited[x][y] = true;

		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];

			if (nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
			if (!visited[nx][ny] && tmp[nx][ny] == 0) {
				tmp[nx][ny] = 2;
				visited[nx][ny] = true;
				q.push({ nx, ny });
			}
		}
	}
}
void push_q() {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (map[i][j] == 2) q.push({ i, j });
		}
	}
}
void get_result(int idx, int k) {
	if (idx >= k) {
		memset(visited, 0, sizeof(visited));
		push_q();
		fill_tmp();
		bfs();
		int res = get_count();
		if (res > result) result = res;
	}
	else {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (map[i][j] == 0) {
					map[i][j] = 1;
					get_result(idx + 1, k);
					map[i][j] = 0;
				}
			}
		}
	}
}
int main() {
	scanf("%d %d", &n, &m);
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			scanf("%d", &map[i][j]);
			tmp[i][j] = map[i][j];
		}
	}
	get_result(0, 3);
	printf("%d\n", result);
	return 0;
}
