#include <string>
#include <vector>
#include <iostream>
#include <unordered_map>
#include <map>
#include <sstream>

using namespace std;

vector<string> split(string str, char Delimiter){
    stringstream ss(str);
    string buffer;
    
    vector<string> result;
    while(getline(ss, buffer, Delimiter)) result.push_back(buffer);
    
    return result;
}

int calc_time(int h1, int h2, int m1, int m2){
    return (h1 - h2) * 60 + m1 - m2;
}

vector<int> solution(vector<int> fees, vector<string> records) {
    vector<int> answer;
    unordered_map<string, string> um;
    unordered_map<string, int> time_um;
    
    for (int i=0;i<records.size();i++){
        vector<string> record = split(records[i], ' ');
        
        if(!um.count(record[1])) um[record[1]] = record[0];
        else {
            string time = um[record[1]];
            um.erase(record[1]);
            vector<string> t1 = split(record[0], ':');
            vector<string> t2 = split(time, ':');
            
            int total = calc_time(stoi(t1[0]), stoi(t2[0]), stoi(t1[1]), stoi(t2[1]));
            
            if(!time_um.count(record[1])) time_um[record[1]] = total;
            else time_um[record[1]] += total;
        }
    }
    
    if(!um.empty()){
        for (auto & elem : um){
            vector<string> t1 = split(elem.second, ':');
            int total = calc_time(23, stoi(t1[0]), 59, stoi(t1[1]));
            if(!time_um.count(elem.first)) time_um[elem.first] = total;
            else time_um[elem.first] += total;
        }
    }
    
    map<string, int> m;
    
    for (auto & elem : time_um) {
        int minutes = elem.second - fees[0];
        if(minutes <= 0) m[elem.first] = fees[1];
        else {
            if(minutes % fees[2] != 0) m[elem.first] = (minutes / fees[2] + 1) * fees[3]  + fees[1];
            else m[elem.first] = minutes / fees[2] * fees[3] + fees[1];
        }
    }
    for (auto iter : m) answer.push_back(iter.second);
    
    return answer;
}
