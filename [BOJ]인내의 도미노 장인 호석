#include <cstdio>
#include <queue>
using namespace std;
const int MAX = 105;

int N, M, R, result, arr[MAX][MAX], input[MAX][MAX];
int dx[] = { -1, 0, 1, 0 };
int dy[] = { 0, 1, 0, -1 };

struct info {
	int x, y, val;
};

void attack(int x, int y, char dir) {
	int d, cnt = 0;
	if (dir == 'N') d = 0;
	else if (dir == 'E') d = 1;
	else if (dir == 'S') d = 2;
	else d = 3;

	queue <info> q;
	if (arr[x][y] != 0) {
		int num = arr[x][y];
		arr[x][y] = 0;
		cnt = 1;

		for (int i = 0; i < num - 1; i++) {
			int nx = x + dx[d];
			int ny = y + dy[d];

			if (nx <= 0 || nx > N || ny <= 0 || ny > M) break;
			
			if (arr[nx][ny] != 0) {
				q.push({ nx, ny, arr[nx][ny] });
				arr[nx][ny] = 0;
				cnt++;
			}
			x = nx, y = ny;
		}
	}

	while (!q.empty()) {
		int x = q.front().x;
		int y = q.front().y;
		int val = q.front().val;
		q.pop();
		
		for (int i = 0; i < val - 1; i++) {
			int nx = x + dx[d];
			int ny = y + dy[d];

			if (nx <= 0 || nx > N || ny <= 0 || ny > M) break;
			if (arr[nx][ny] != 0) {
				q.push({ nx, ny , arr[nx][ny] });
				arr[nx][ny] = 0;
				cnt++;
			}
			x = nx, y = ny;
		}
	}
	result += cnt;
}

void protect(int x, int y) {
	if (arr[x][y] == 0) arr[x][y] = input[x][y];
}

int main() {
	scanf("%d %d %d", &N, &M, &R);

	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			scanf("%d", &arr[i][j]);
			input[i][j] = arr[i][j];
		}
	}

	for (int i = 0; i < R; i++) {
		int x1, y1, x2, y2;
		char d1;

		scanf("%d %d %c", &x1, &y1, &d1);
		scanf("%d %d", &x2, &y2);

		attack(x1, y1, d1);
		protect(x2, y2);
		
	}

	printf("%d\n", result);
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			if (arr[i][j] == 0) printf("F ");
			else printf("S ");
		}
		printf("\n");
	}
	return 0;
}
