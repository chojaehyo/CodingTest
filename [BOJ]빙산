#include <stdio.h>
#include <cstring>
#include <queue>
using namespace std;
const int MAX = 305;

int N, M, ice;
int arr[MAX][MAX], tmp[MAX][MAX];
bool visited[MAX][MAX];
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};

int melt(int x, int y){
  int cnt = 0;
  for(int i=0;i<4;i++){
    int nx = x+dx[i];
    int ny = y+dy[i];
    
    if(nx >= 0 && nx < N && ny >= 0 && ny < M){
      if(arr[nx][ny] == 0) cnt++;
    }
  }
  return cnt;
}

void bfs(int a, int b){
  queue <pair<int,int>> q;
  q.push({a, b});
  visited[a][b] = true;
  
  while(!q.empty()){
    int x = q.front().first;
    int y = q.front().second;
    q.pop();
    
    for(int i=0;i<4;i++){
      int nx = x+dx[i];
      int ny = y+dy[i];
      
      if(nx < 0 || nx >= N || ny < 0 || ny >= M) continue;
      if(!visited[nx][ny] && arr[nx][ny] > 0){
        visited[nx][ny] = true;
        q.push({nx, ny});
      }
    }
  }
}
int main(){
  scanf("%d %d", &N, &M);
  for(int i=0;i<N;i++){
    for(int j=0;j<M;j++){
      scanf("%d", &arr[i][j]);
    }
  }
  int Time = 0;
  bool flag = false;
  while(1){
    int land = 0;
    memset(visited, 0, sizeof(visited));
    
    for(int i=0;i<N;i++){
      for(int j=0;j<M;j++){
        if(arr[i][j] > 0 && !visited[i][j]) {
          land++;
          bfs(i, j);
        }
      }
    }
    if(land >= 2) {
      flag = true; 
      break;
    }
    if(land == 0) break;
    
    for(int i=0;i<N;i++){
      for(int j=0;j<M;j++){
        if(arr[i][j] > 0){
          tmp[i][j] = arr[i][j] - melt(i, j);
          if(tmp[i][j] < 0) tmp[i][j] = 0;
        }
      }
    }
    
    for(int i=0;i<N;i++){
      for(int j=0;j<M;j++){
        arr[i][j] = tmp[i][j];
      }
    }
    Time++;
  }
  if(flag) printf("%d\n", Time);
  else printf("0\n");
  return 0;
}
