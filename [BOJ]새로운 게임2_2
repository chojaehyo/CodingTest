#include <cstdio>
#include <deque>
#include <queue>
using namespace std;
const int MAX = 15;

int N, K, arr[MAX][MAX];
int dx[] = { 0, 0, -1, 1 };
int dy[] = { 1, -1, 0, 0 };
deque <int> horse_arr[MAX][MAX];
struct info {
	int x, y, d;
};
info horse[MAX];

bool check_over_four() {
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			if (horse_arr[i][j].size() >= 4) return true;
		}
	}
	return false;
}

bool move_horse() {
	for (int i = 1; i <= K; i++) {
		int x = horse[i].x;
		int y = horse[i].y;
		int d = horse[i].d;

		int nx = x + dx[d];
		int ny = y + dy[d];

		if (nx < 1 || nx > N || ny < 1 || ny > N || arr[nx][ny] == 2) {
			if (d == 0 || d == 2) d++;
			else d--;

			nx = x + dx[d];
			ny = y + dy[d];
			horse[i].d = d;

			if (nx < 1 || nx > N || ny < 1 || ny > N || arr[nx][ny] == 2) continue;
		}
		
		if (arr[nx][ny] == 0) {
			vector <int> tmp;
			bool find = false;

			while (!horse_arr[x][y].empty()) {
				int val = horse_arr[x][y].back();
				if (!find && val != i) {
					tmp.push_back(val);
					horse_arr[x][y].pop_back();
				}
				else if (val == i) {
					find = true;
					tmp.push_back(val);
					horse_arr[x][y].pop_back();
				}
				else if (find) break;
			}

			while (!tmp.empty()) {
				int val = tmp.back();
				horse[val].x = nx;
				horse[val].y = ny;
				horse_arr[nx][ny].push_back(val);
				tmp.pop_back();
			}

		}
		else if(arr[nx][ny] == 1) {
			bool find = false;

			while (!horse_arr[x][y].empty()) {
				int val = horse_arr[x][y].back();
				if (!find && val != i) {
					horse[val].x = nx;
					horse[val].y = ny;
					horse_arr[nx][ny].push_back(val);
					horse_arr[x][y].pop_back();
				}
				else if (val == i) {
					find = true;
					horse[val].x = nx;
					horse[val].y = ny;
					horse_arr[nx][ny].push_back(val);
					horse_arr[x][y].pop_back();
				}
				else if (find) break;
			}
		}
		if (check_over_four()) return true;
	}
	return false;
}

int main() {
	scanf("%d %d", &N, &K);

	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			scanf("%d", &arr[i][j]);
		}
	}

	int r, c, dir;
	for (int i = 1; i <= K; i++) {
		scanf("%d %d %d", &r, &c, &dir);

		horse_arr[r][c].push_back(i);
		horse[i].x = r;
		horse[i].y = c;
		horse[i].d = dir - 1;
	}

	int turn = 0;
	while (turn <= 1000) {
		turn++;
		if (move_horse()) {
			printf("%d\n", turn);
			return 0;
		}
	}
	printf("-1\n");
	return 0;
}

