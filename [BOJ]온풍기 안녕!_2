#include <cstdio>
#include <cstring>
#include <queue>
#include <vector>
#include <cstdlib>
using namespace std;
const int MAX = 25;

int R, C, K, W, arr[MAX][MAX], tmp_temp[MAX][MAX], temp[MAX][MAX];
int dx[] = {0, 0, -1, 1};
int dy[] = {1, -1, 0, 0};
int dx2[] = {0, 1};
int dy2[] = {1, 0};
int wall[MAX][MAX][4];
struct INFO{
    int x, y, d;
};
vector <INFO> heater;
bool visited[MAX][MAX];

bool check_range(int x, int y){return x >= 0 && x < R && y >= 0 && y < C;}

void start_heater(){
    for(int i=0;i<heater.size();i++){
        memset(visited, 0, sizeof(visited));
        int hx = heater[i].x, hy = heater[i].y, hd = heater[i].d;
        int a = hx + dx[hd], b = hy + dy[hd];

        queue <INFO> q;
        q.push({a, b, 5});
        temp[a][b] += 5;
        visited[a][b] = true;

        while(!q.empty()){
            int x = q.front().x;
            int y = q.front().y;
            int t = q.front().d;
            if(t == 1) break;
            q.pop();

            if(hd == 0){
                if(check_range(x-1, y+1)){
                    if(wall[x-1][y][1] == 0 && wall[x-1][y][2] == 0){
                        if(!visited[x-1][y+1]){
                            visited[x-1][y+1] = true;
                            temp[x-1][y+1] += t-1;
                            q.push({x-1, y+1, t-1});
                        }
                    }
                }

                if(check_range(x, y+1)){
                    if(wall[x][y][1] == 0){
                        if(!visited[x][y+1]){
                            visited[x][y+1] = true;
                            temp[x][y+1] += t-1;
                            q.push({x, y+1, t-1});
                        }
                    }
                }

                if(check_range(x+1, y+1)){
                    if(wall[x+1][y][0] == 0 && wall[x+1][y][1] == 0){
                        if(!visited[x+1][y+1]){
                            visited[x+1][y+1] = true;
                            temp[x+1][y+1] += t-1;
                            q.push({x+1, y+1, t-1});
                        }
                    }
                }
            }
            else if(hd == 1){
                if(check_range(x-1, y-1)){
                    if(wall[x-1][y][2] == 0 && wall[x-1][y][3] == 0){
                        if(!visited[x-1][y-1]){
                            visited[x-1][y-1] = true;
                            temp[x-1][y-1] += t-1;
                            q.push({x-1, y-1, t-1});
                        }
                    }
                }

                if(check_range(x, y-1)){
                    if(wall[x][y][3] == 0){
                        if(!visited[x][y-1]){
                            visited[x][y-1] = true;
                            temp[x][y-1] += t-1;
                            q.push({x, y-1, t-1});
                        }
                    }
                }

                if(check_range(x+1, y-1)){
                    if(wall[x+1][y][0] == 0 && wall[x+1][y][3] == 0){
                        if(!visited[x+1][y-1]){
                            visited[x+1][y-1] = true;
                            temp[x+1][y-1] += t-1;
                            q.push({x+1, y-1, t-1});
                        }
                    }
                }
            }
            else if(hd == 2){
                if(check_range(x-1, y-1)){
                    if(wall[x][y-1][0] == 0 && wall[x][y-1][1] == 0){
                        if(!visited[x-1][y-1]){
                            visited[x-1][y-1] = true;
                            temp[x-1][y-1] += t-1;
                            q.push({x-1, y-1, t-1});
                        }
                    }
                }

                if(check_range(x-1, y)){
                    if(wall[x][y][0] == 0){
                        if(!visited[x-1][y]){
                            visited[x-1][y] = true;
                            temp[x-1][y] += t-1;
                            q.push({x-1, y, t-1});
                        }
                    }
                }

                if(check_range(x-1, y+1)){
                    if(wall[x][y+1][0] == 0 && wall[x][y+1][3] == 0){
                        if(!visited[x-1][y+1]){
                            visited[x-1][y+1] = true;
                            temp[x-1][y+1] += t-1;
                            q.push({x-1, y+1, t-1});
                        }
                    }
                }
            }
            else{
                if(check_range(x+1, y-1)){
                    if(wall[x][y-1][1] == 0 && wall[x][y-1][2] == 0){
                        if(!visited[x+1][y-1]){
                            visited[x+1][y-1] = true;
                            temp[x+1][y-1] += t-1;
                            q.push({x+1, y-1, t-1});
                        }
                    }
                }

                if(check_range(x+1, y)){
                    if(wall[x][y][2] == 0){
                        if(!visited[x+1][y]){
                            visited[x+1][y] = true;
                            temp[x+1][y] += t-1;
                            q.push({x+1, y, t-1});
                        }
                    }
                }

                if(check_range(x+1, y+1)){
                    if(wall[x][y+1][2] == 0 && wall[x][y+1][3] == 0){
                        if(!visited[x+1][y+1]){
                            visited[x+1][y+1] = true;
                            temp[x+1][y+1] += t-1;
                            q.push({x+1, y+1, t-1});
                        }
                    }
                }
            }
        }
    }
}

void control_temp(){
    memset(tmp_temp, 0, sizeof(tmp_temp));

    for(int i=0;i<R;i++){
        for(int j=0;j<C;j++){
            for(int d=0;d<2;d++){
                int ni = i + dx2[d];
                int nj = j + dy2[d];

                if(!check_range(ni, nj)) continue;
                if(d == 0 && wall[i][j][1]) continue;
                else if(d == 1 && wall[i][j][2]) continue;

                int val = abs((temp[i][j] - temp[ni][nj])/4);

                if(temp[i][j] - temp[ni][nj] > 0) {
                    tmp_temp[i][j] -= val;
                    tmp_temp[ni][nj] += val;
                }
                else{
                    tmp_temp[i][j] += val;
                    tmp_temp[ni][nj] -= val;
                }
            }
        }
    }

    for(int i=0;i<R;i++) {
        for (int j = 0; j < C; j++) {
            temp[i][j] += tmp_temp[i][j];
            if (temp[i][j] < 0) temp[i][j] = 0;
        }
    }
}

void minus_edge(){
    for(int i=0;i<R;i++){
        if(temp[i][0]) temp[i][0]--;
        if(temp[i][C-1]) temp[i][C-1]--;
    }

    for(int j=1;j<C-1;j++){
        if(temp[0][j]) temp[0][j]--;
        if(temp[R-1][j]) temp[R-1][j]--;
    }
}

bool check_target(){
    for(int i=0;i<R;i++){
        for(int j=0;j<C;j++){
            if(arr[i][j] == 5){
                if(temp[i][j] < K) return false;
            }
        }
    }
    return true;
}

int main(){
    scanf("%d %d %d", &R, &C, &K);
    for(int i=0;i<R;i++){
        for(int j=0;j<C;j++){
            scanf("%d", &arr[i][j]);
            if(arr[i][j] >= 1 && arr[i][j] <= 4){
                heater.push_back({i, j, arr[i][j]-1});
                arr[i][j] = 0;
            }
        }
    }
    scanf("%d", &W);
    int x, y, t;
    for(int i=0;i<W;i++){
        scanf("%d %d %d", &x, &y, &t);
        x--; y--;
        if(t == 0) {
            wall[x][y][0] = 1;
            if(check_range(x-1, y)) wall[x-1][y][2] = 1;
        }
        else{
            wall[x][y][1] = 1;
            if(check_range(x, y+1)) wall[x][y+1][3] = 1;
        }
    }
    int chocolate = 0;
    while(chocolate <= 100){
        start_heater();
        control_temp();
        minus_edge();
        chocolate++;
        if(check_target()) break;
    }
    printf("%d\n", chocolate);
    return 0;
}
