#include <stdio.h>
#include <queue>
using namespace std;
const int MAX = 10;

int n, m, max_val = -1;
int arr[MAX][MAX], virus[MAX][MAX];
int dx[] = { 0, 1, 0, -1 };
int dy[] = { -1, 0, 1, 0 };

void spread_virus(int a, int b) {
	queue <pair<int, int>> q;
	q.push(make_pair(a, b));

	while (!q.empty()) {
		int x = q.front().first;
		int y = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];

			if (nx < 0 || nx >= n || ny < 0 || ny >= m || virus[nx][ny] == 2 || virus[nx][ny] == 1) continue;
			if (virus[nx][ny] == 0) {
				virus[nx][ny] = 2;
				q.push(make_pair(nx, ny));
			}
		}	
	}
}

int spread_count() {
	int total = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (virus[i][j] == 2) {
				spread_virus(i, j);
			}
		}
	}

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (virus[i][j] == 0) total++;
		}
	}
	return total;
}


void copy_arr(int arr1[MAX][MAX], int arr2[MAX][MAX]) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			arr1[i][j] = arr2[i][j];
		}
	}
}

void built_walls(int idx) {
	if (idx >= 3) {
		copy_arr(virus, arr);
		int res = spread_count();
		if (max_val < res) max_val = res;
	}
	else {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (arr[i][j] == 0) {
					arr[i][j] = 1;
					built_walls(idx + 1);
					arr[i][j] = 0;
				}
			}
		}
	}
}
int main() {
	scanf("%d %d", &n, &m);

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			scanf("%d", &arr[i][j]);
		}
	}

	built_walls(0);
	printf("%d\n", max_val);
	return 0;
}
