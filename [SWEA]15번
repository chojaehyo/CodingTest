const int MAX = 105;

int n, arr[10][10];
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};
bool visited[10][10];

class Queue{
private:
    int data[MAX];
    int idx_front, idx_back;

public:
    Queue(){
        idx_front = 0;
        idx_back = 0;
    }
    bool empty(){
        return idx_front == idx_back;
    }
    void push(int x){
        idx_back = (idx_back+1) % MAX;
        data[idx_back] = x;
    }
    void pop(){
        idx_front = (idx_front + 1) % MAX;
    }
    int front(){
        return data[(idx_front + 1) % MAX];
    }
};



void bfs_init(int map_size, int map[10][10]) {
    n = map_size;

    for(int i=0;i<map_size;i++){
        for(int j=0;j<map_size;j++){
            arr[i][j] = map[i][j];
        }
    }
}

int bfs(int x1, int y1, int x2, int y2) {
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            visited[i][j] = false;
        }
    }

    x1--;y1--;x2--;y2--;
    Queue x_q, y_q, d_q;
    x_q.push(x1);
    y_q.push(y1);
    d_q.push(0);
    visited[y1][x1] = true;

    while(!x_q.empty()){
        int x = x_q.front();
        int y = y_q.front();
        int d = d_q.front();
        x_q.pop();
        y_q.pop();
        d_q.pop();

        if(x == x2 && y == y2) return d;

        for(int i=0;i<4;i++){
            int nx = x + dx[i];
            int ny = y + dy[i];

            if(nx < 0 || nx >= n || ny < 0 || ny >= n) continue;
            if(!visited[ny][nx]){
                if(arr[ny][nx] == 0){
                    visited[ny][nx] = true;
                    x_q.push(nx);
                    y_q.push(ny);
                    d_q.push(d+1);
                }
            }
        }
    }

    return -1;
}
