#include <cstdio>
#include <vector>
#include <queue>
using namespace std;
const int MAX = 105;

int N, M, K, C, arr[MAX][MAX], arr2[MAX][MAX], smell[MAX][MAX], smell2[MAX][MAX], max_remove_cnt;
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};
int dx2[] = {-1, -1, 1, 1};
int dy2[] = {-1, 1, -1, 1};
int max_arr[MAX][MAX], max_smell[MAX][MAX], result;
struct INFO{
    int x, y, total;
};
vector <INFO> plant;
bool check_range(int x, int y){
    return x >= 0 && x < N && y >= 0 && y < N;
}

void plus_plant(){
    int tmp[MAX][MAX] = {0};
    for(int i=0;i<N;i++){
        for(int j=0;j<N;j++){
            int cnt = 0;
            if(arr[i][j] > 0){
                for(int k=0;k<4;k++){
                    int nx = i + dx[k];
                    int ny = j + dy[k];

                    if(!check_range(nx, ny) || arr[nx][ny] == -1) continue;
                    if(arr[nx][ny] > 0) cnt++;
                }
                tmp[i][j] += cnt;
            }
        }
    }
    plant.clear();
    for(int i=0;i<N;i++) {
        for (int j = 0; j < N; j++) {
            arr[i][j] += tmp[i][j];
            if(arr[i][j] > 0){
                plant.push_back({i, j, arr[i][j]});
            }
        }
    }
}

void make_new_plant(){
    int tmp[MAX][MAX] = {0};
    for(int i=0;i<plant.size();i++){
        int x = plant[i].x;
        int y = plant[i].y;
        int total = plant[i].total;
        queue <pair<int, int>> q;

        for(int j=0;j<4;j++){
            int nx = x + dx[j];
            int ny = y + dy[j];

            if(!check_range(nx, ny)) continue;
            if(arr[nx][ny] == 0 && smell[nx][ny] == 0) q.push({nx, ny});
        }

        int cnt = q.size();
        while(!q.empty()){
            int x = q.front().first;
            int y = q.front().second;
            q.pop();
            tmp[x][y] += total/cnt;
        }
    }
    for(int i=0;i<N;i++) {
        for (int j = 0; j < N; j++) {
            arr[i][j] += tmp[i][j];
        }
    }
}

void copy_arr(int A[][MAX], int B[][MAX]){
    for(int i=0;i<N;i++) {
        for (int j = 0; j < N; j++) {
            A[i][j] = B[i][j];
        }
    }
}

void find_max_pos(int x, int y, int c){
    copy_arr(arr2, arr);
    copy_arr(smell2, smell);
    int k = K;
    if(k > N) k = N;
    int total_remove = 0;
    total_remove += arr[x][y];
    arr[x][y] = 0;
    smell[x][y] = c;
    for(int j=0;j<4;j++) {
        for(int i=1;i<=k;i++){
            int nx = x + dx2[j] * i;
            int ny = y + dy2[j] * i;

            if(!check_range(nx, ny) || arr[nx][ny] == -1) break;
            if(arr[nx][ny] == 0){
                smell[nx][ny] = c;
                break;
            }
            else{
                total_remove += arr[nx][ny];
                arr[nx][ny] = 0;
                smell[nx][ny] = c;
            }
        }
    }
    if(max_remove_cnt < total_remove){
        max_remove_cnt = total_remove;
        copy_arr(max_arr, arr);
        copy_arr(max_smell, smell);
    }
    copy_arr(arr, arr2);
    copy_arr(smell, smell2);
}
void remove_smell(int time){
    for(int i=0;i<N;i++) {
        for (int j = 0; j < N; j++) {
            if (time - smell[i][j] == C) smell[i][j] = 0;
        }
    }
}

int main(){
    scanf("%d %d %d %d", &N, &M, &K, &C);
    for(int i=0;i<N;i++){
        for(int j=0;j<N;j++){
            scanf("%d", &arr[i][j]);
            arr2[i][j] = arr[i][j];
        }
    }

    for(int i=0;i<M;i++){
        plus_plant();
        make_new_plant();
        max_remove_cnt = 0;
        for(int x=0;x<N;x++){
            for(int y=0;y<N;y++){
                if(arr[x][y] > 0) {
                    find_max_pos(x, y, i + 10);
                }
            }
        }
        copy_arr(arr, max_arr);
        copy_arr(smell, max_smell);
        result += max_remove_cnt;
        remove_smell(i+10);
    }
    printf("%d\n", result);
    return 0;
}
