#include <cstdio>
#include <queue>
using namespace std;
const int MAX = 25;

int N, arr[MAX][MAX], score[5] = {0, 1, 10, 100, 1000}, result;
int preference[MAX*MAX][MAX*MAX];
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};
struct INFO{
    int x, y, prefer, blank;
};

struct compare{
    bool operator()(INFO a, INFO b){
        if(a.prefer < b.prefer) return true;
        else if (a.prefer == b.prefer){
            if(a.blank < b.blank) return true;
            else if(a.blank == b.blank){
                if(a.x > b.x) return true;
                else if(a.x == b.x) {
                    if(a.y > b.y) return true;
                }
            }
        }
        return false;
    }
};
priority_queue <INFO, vector<INFO>, compare> pq;

int main(){
    scanf("%d", &N);
    int n0, n1, n2, n3, n4;
    for(int i=0;i<N*N;i++){
        scanf("%d %d %d %d %d", &n0, &n1, &n2, &n3, &n4);
        preference[n0][n1] = 1;
        preference[n0][n2] = 1;
        preference[n0][n3] = 1;
        preference[n0][n4] = 1;

        pq = {};
        for(int x=0;x<N;x++){
            for(int y=0;y<N;y++){
                if(arr[x][y]) continue;
                int p_cnt = 0, b_cnt = 0;

                for(int d=0;d<4;d++){
                    int nx = x + dx[d];
                    int ny = y + dy[d];

                    if(nx < 0 || nx >= N || ny < 0 || ny >= N) continue;
                    if(arr[nx][ny] == 0) b_cnt++;
                    else if(arr[nx][ny] == n1 || arr[nx][ny] == n2 || arr[nx][ny] == n3 || arr[nx][ny] == n4) p_cnt++;
                }
                pq.push({x, y, p_cnt, b_cnt});
            }
        }
        arr[pq.top().x][pq.top().y] = n0;
    }
    for(int x=0;x<N;x++){
        for(int y=0;y<N;y++){
            int cnt = 0;

            for(int d=0;d<4;d++){
                int nx = x + dx[d];
                int ny = y + dy[d];

                if(nx < 0 || nx >= N || ny < 0 || ny >= N) continue;
                if(preference[arr[x][y]][arr[nx][ny]] == 1) cnt++;
            }
            result += score[cnt];
        }
    }
    printf("%d\n", result);
    return 0;
}
