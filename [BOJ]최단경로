#include <cstdio>
#include <vector>
#include <queue>
using namespace std;
const int MAX = 20005;

int V, E, K, u, v, w, dist[MAX];
vector <pair<int, int>> graph[MAX];

void dijkstra(int start){
    priority_queue <pair<int, int>> pq;
    pq.push({0, start});
    dist[start] = 0;

    while(!pq.empty()){
        int cost = -pq.top().first;
        int cur = pq.top().second;
        pq.pop();

        for(int i=0;i<graph[cur].size();i++){
            int next = graph[cur][i].first;
            int ncost = graph[cur][i].second;

            if(dist[next] > dist[cur] + ncost){
                dist[next] = dist[cur] + ncost;
                pq.push({-dist[next], next});
            }
        }
    }
}

int main(){
    scanf("%d %d %d", &V, &E, &K);
    for(int i=0;i<E;i++){
        scanf("%d %d %d", &u, &v, &w);
        graph[u].push_back({v, w});
    }
    fill(dist, dist+V+1, 1e9);

    dijkstra(K);

    for(int i=1;i<=V;i++) {
        if(dist[i] == 1e9) printf("INF\n");
        else printf("%d\n", dist[i]);
    }
    return 0;
}
