#include <cstdio>
#include <cmath>
#include <cstring>
#include <queue>
using namespace std;
const int MAX = 105;

int n, l, r, arr[MAX][MAX];
bool visited[MAX][MAX];
int dx[] = { 0, 1, 0, -1 };
int dy[] = { -1, 0, 1, 0 };

bool bfs(int a, int b) {
	visited[a][b] = true;

	queue <pair<int, int>> q;
	queue <pair<int, int>> q2;
	queue <int> total;

	q.push(make_pair(a, b));
	q2.push(make_pair(a, b));
	total.push(arr[a][b]);

	while (!q.empty()) {
		int x = q.front().first;
		int y = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];

			if (nx < 0 || nx >= n || ny < 0 || ny >= n) continue;

			int val = abs(arr[x][y] - arr[nx][ny]);
			if (!visited[nx][ny] && val >= l && val <= r) {
				visited[nx][ny] = true;
				q.push(make_pair(nx, ny));
				q2.push(make_pair(nx, ny));
				total.push(arr[nx][ny]);
			}
		}

	}

	if (total.size() == 1) return false;

	int c_num = total.size();
	int p_total = 0;
	while (!total.empty()) {
		p_total += total.front();
		total.pop();
	}

	int mean_people = p_total / c_num;

	while (!q2.empty()) {
		int x = q2.front().first;
		int y = q2.front().second;
		q2.pop();

		arr[x][y] = mean_people;
	}
	return true;
}

int main() {
	scanf("%d %d %d", &n, &l, &r);

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			scanf("%d", &arr[i][j]);
		}
	}

	int time = 0;
	while (1) {
		bool flag = false;
		memset(visited, 0, sizeof(visited));
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (!visited[i][j]) {
					bool res = bfs(i, j);
					if (res) flag = true;
				}
			}
		}

		if (!flag) break;
		time++;
	}
	printf("%d\n", time);
	return 0;
}
