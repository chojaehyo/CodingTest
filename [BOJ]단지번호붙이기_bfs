#include <stdio.h>
#include <queue>
#include <vector>
#include <algorithm>
using namespace std;
const int MAX = 30;

int n, val=1;
int arr[MAX][MAX];
bool visited[MAX][MAX];
vector <int> v;
struct loc{
  int x, y;
};
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};

void bfs(int a, int b){
  visited[a][b] = true;
  queue <loc> q;
  q.push({a, b});
  
  while(!q.empty()){
    int x = q.front().x;
    int y = q.front().y;
    q.pop();
    
    for(int i=0;i<4;i++){
      int nx = x+dx[i];
      int ny = y+dy[i];
      
      if(nx < 0 || nx >= n || ny < 0 || ny >= n) continue;
      if(!visited[nx][ny] && arr[nx][ny]){
        visited[nx][ny] = true;
        q.push({nx, ny});
        val++;
      }
    }
  }
}
int main(){
  scanf("%d", &n);
  for(int i=0;i<n;i++){
    for(int j=0;j<n;j++){
      scanf("%1d", &arr[i][j]);
    }
  }
  for(int i=0;i<n;i++){
    for(int j=0;j<n;j++){
      if(!visited[i][j] && arr[i][j]){
        bfs(i, j);
        v.push_back(val);
        val = 1;
      }
    }
  }
  sort(v.begin(), v.end());
  printf("%d\n", v.size());
  for(int i=0;i<v.size();i++) printf("%d\n", v[i]);
  return 0;
}
