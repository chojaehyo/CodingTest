#include <stdio.h>
#include <cstring>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;
const int MAX = 1005;

int n, m, v;
vector <int> graph[MAX]; 
queue <int> q;
bool visited[MAX];

void dfs(int start){
  visited[start] = true;
  printf("%d ", start);
  
  for(int i=0;i<graph[start].size();i++){
    int next = graph[start][i];
    if(!visited[next]) dfs(next);
  }
}

void bfs(){
  q.push(v);
  
  while(!q.empty()){
    int cur = q.front();
    q.pop();
    visited[cur] = true;
    printf("%d ", cur);
    
    for(int i=0;i<graph[cur].size();i++){
      int next = graph[cur][i];
      if(!visited[next]){
        visited[next] = true;
        q.push(next);
      }
    }
  }
}
int main(){
  scanf("%d %d %d", &n, &m, &v);
  for(int i=0;i<m;i++) {
    int a, b;
    scanf("%d %d", &a, &b);
    graph[a].push_back(b);
    graph[b].push_back(a);
  }
  for(int i=0;i<n;i++) sort(graph[i].begin(), graph[i].end());
  dfs(v);
  printf("\n");
  memset(visited, 0, sizeof(visited));
  bfs();
  return 0;
}
