#include <cstdio>
#include <cstring>
#include <deque>
#include <queue>
using namespace std;
const int MAX = 55;

int N, M, T;
int dx[] = { -1, 0, 1, 0 };
int dy[] = { 0, 1, 0, -1 };
deque <int> arr[MAX];
bool visited[MAX][MAX];

void rotate(int idx, int cnt) {
	for (int i = 0; i < cnt; i++) {
		int x = arr[idx].back();
		
		arr[idx].pop_back();
		arr[idx].push_front(x);
	}
}

void get_average() {
	double total = 0, cnt = 0;
	for (int i = 1; i <= N; i++) {
		for (int j = 0; j < M; j++) {
			if (arr[i][j] > 0) {
				total += arr[i][j];
				cnt++;
			}
		}
	}
	
	double average = total / cnt;
	for (int i = 1; i <= N; i++) {
		for (int j = 0; j < M; j++) {
			if (arr[i][j] == 0) continue;
			else if (arr[i][j] < average) arr[i][j]++;
			else if (arr[i][j] > average) arr[i][j]--;
		}
	}
}

bool bfs(int a, int b) {
	bool flag = false;
	queue <pair<int, int>> q;
	queue <pair<int, int>> same_num;
	q.push(make_pair(a, b));
	same_num.push(make_pair(a, b));
	visited[a][b] = true;

	while (!q.empty()) {
		int x = q.front().first;
		int y = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];

			if (nx < 1 || nx > N) continue;
			
			if (ny < 0) ny = M - 1;
			else if (ny >= M) ny = 0;

			if (!visited[nx][ny] && arr[nx][ny] == arr[a][b]) {
				visited[nx][ny] = true;
				q.push(make_pair(nx, ny));
				same_num.push(make_pair(nx, ny));
			}
		}
	}

	if (same_num.size() == 1) return flag;
	else {
		flag = true;
		while (!same_num.empty()) {
			int x = same_num.front().first;
			int y = same_num.front().second;
			same_num.pop();

			arr[x][y] = 0;
		}
		return flag;
	}
}
void check_num() {
	memset(visited, 0, sizeof(visited));
	bool flag = false;

	for (int i = 1; i <= N; i++) {
		for (int j = 0; j < M; j++) {
			if (!visited[i][j] && arr[i][j] > 0) {
				bool res = bfs(i, j);
				if (res) flag = true;
			}
		}
	}

	if (!flag) get_average();
}

int get_total() {
	int total = 0;
	for (int i = 1; i <= N; i++) {
		for (int j = 0; j < M; j++) {
			total += arr[i][j];
		}
	}
	return total;
}

int main() {
	scanf("%d %d %d", &N, &M, &T);

	for (int i = 1; i <= N; i++) {
		for (int j = 0; j < M; j++) {
			int num;
			scanf("%d", &num);

			arr[i].push_back(num);
		}
	}

	for (int i = 0; i < T; i++) {
		int x, d, k;
		scanf("%d %d %d", &x, &d, &k);

		if (d == 1) k = M - k;

		for (int a = 1; a <= N; a++) {
			if (a % x == 0) rotate(a, k);
		}
		check_num();
	}
	int res = get_total();
	printf("%d\n", res);
	return 0;
}
